{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Benvinguts/des al MAT","text":"<p>El Marc d'Automatitzaci\u00f3 de Testing (MAT) \u00e9s una iniciativa innovadora desenvolupada pel Centre de Telecomunicacions i Tecnologies de la Informaci\u00f3 (CTTI) de la Generalitat de Catalunya. Aquest marc representa un salt qualitatiu en la manera com abordem les proves de programari en els nostres projectes tecnol\u00f2gics.</p> <p>El MAT no \u00e9s nom\u00e9s un conjunt d'eines; \u00e9s una filosofia integral que combina:</p> <ul> <li>Eines avan\u00e7ades: Seleccionades acuradament per optimitzar cada fase del proc\u00e9s de proves.</li> <li>Processos eficients: Dissenyats per agilitzar el cicle de desenvolupament i garantir la qualitat del producte final.</li> <li>Millors pr\u00e0ctiques: Basades en est\u00e0ndards internacionals i adaptades a les necessitats espec\u00edfiques de la Generalitat.</li> </ul> <p>Amb el MAT, aspirem a:</p> <ul> <li>Millorar significativament la qualitat del programari desenvolupat per i per a la Generalitat.</li> <li>Reduir els costos associats al desenvolupament i manteniment de sistemes.</li> <li>Accelerar el proc\u00e9s de lliurament de productes, assegurant alhora la seva fiabilitat i rendiment.</li> <li>Fomentar una cultura d'excel\u00b7l\u00e8ncia i innovaci\u00f3 cont\u00ednua en el nostre ecosistema tecnol\u00f2gic.</li> </ul> <p>Us convidem a explorar les diferents eines i recursos que el MAT posa a la vostra disposici\u00f3. Junts, estem construint el futur digital de Catalunya.</p> <ul> <li> <p> Eines avan\u00e7ades</p> <p>Seleccionades acuradament per optimitzar cada fase del proc\u00e9s de proves.</p> </li> <li> <p> Processos eficients</p> <p>Dissenyats per agilitzar el cicle de desenvolupament i garantir la qualitat del producte final.</p> </li> <li> <p> Millors pr\u00e0ctiques</p> <p>Basades en est\u00e0ndards internacionals i adaptades a les necessitats espec\u00edfiques de la Generalitat.</p> </li> </ul>"},{"location":"#beneficios","title":"BENEFICIOS","text":"<ul> <li> <p> Millora de qualitat</p> <p>Millorar significativament la qualitat del programari desenvolupat per i per a la Generalitat.</p> </li> <li> <p> Reducci\u00f3 de costos</p> <p>Reduir els costos associats al desenvolupament i manteniment de sistemes.</p> </li> </ul> <ul> <li> <p> Acceleraci\u00f3 de lliuraments</p> <p>Accelerar el proc\u00e9s de lliurament de productes, assegurant alhora la seva fiabilitat i rendiment.</p> </li> <li> <p> Cultura d'innovaci\u00f3</p> <p>Fomentar una cultura d'excel\u00b7l\u00e8ncia i innovaci\u00f3 cont\u00ednua en el nostre ecosistema tecnol\u00f2gic.</p> </li> </ul> <p>Construint el futur digital de Catalunya</p> <p>Us convidem a explorar les diferents eines i recursos que el MAT posa a la vostra disposici\u00f3. Junts, estem construint el futur digital de Catalunya.</p> <p>Descobreix el MAT  Continuous Deployment Pipeline</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#contents","title":"Contents","text":"<ul> <li>Project layout</li> <li>Quick start (Local Machine not Dockerized)</li> <li>Execution modes</li> <li>Standalone</li> <li>Hub and Nodes<ul> <li>Docker networking</li> <li>Using different machines/VMs</li> <li>Docker Compose</li> </ul> </li> <li>Fully distributed mode - Router, Queue, Distributor, EventBus, SessionMap and Nodes</li> <li>Video recording</li> <li>Dynamic Grid</li> <li>Configuration example</li> <li>Execution with Hub &amp; Node roles</li> <li>Execution with Standalone roles</li> <li>Using Dynamic Grid in different machines/VMs</li> <li>Execution with Docker Compose</li> <li>Video recording, screen resolution, and time zones in a Dynamic Grid</li> <li>Kubernetes</li> <li>Configuring the containers</li> <li>SE_OPTS Selenium Configuration Options</li> <li>SE_JAVA_OPTS Java Environment Options</li> <li>Node configuration options</li> <li>Setting Sub Path</li> <li>Setting Screen Resolution</li> <li>Grid Url and Session Timeout</li> <li>Session request timeout</li> <li>Increasing session concurrency per container</li> <li>Running in Headless mode</li> <li>Building the images</li> <li>Waiting for the Grid to be ready</li> <li>Debugging</li> <li>Install certificates for Chromium based browsers</li> <li>Tracing in Grid</li> <li>Troubleshooting</li> </ul>"},{"location":"about/#project-layout","title":"Project layout","text":"<pre><code>functional-test\n\u2502   docker-compose-v3.yml      -&gt; Docker Compose file for Selenium Grid.\n\u2502   TestNG.xml                 -&gt; Definici\u00f3n de las pruebas\n\u2502   pom.xml                    -&gt; Fichero de dependencias\n\u2502   README.md\n\u2502\n\u2514\u2500\u2500\u2500.devcontainer                  -&gt; Definici\u00f3n contenedores IDE VSCode\n\u2502   \u2502   devcontainer.json\n\u2514\u2500\u2500\u2500resources                  \n\u2502   \u2502   resources.properties    -&gt; Definici\u00f3n variables\n\u2502   |   spark-config.json       -&gt; Definici\u00f3n variables informe html\n\u251c\u2500\u2500\u2500src\n\u2502   \u2514\u2500\u2500\u2500main/java                         -&gt; Clases de inicializaci\u00f3n de los drivers\n\u2502   \u2502   \u2502   CapabilityFactory.java         \n\u2502   \u2502   \u2502   Init.java\n\u2502   \u2502   \u2502   ExecutionListener.java\n|   |   |   ResultSender.java\n\u2502   \u2502   \u2502   OptionsManager.java\n|   |   |   ExtentManager.java\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500\u2500Pages                         \n\u2502   \u2502   \u2502      QualityGenCatPage.java\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500\u2500Utilities\n\u2502   \u2502          Common.java\n\u2502   \u2502          QualityGenCatPage.java\n\u2502   \u2502 \n\u2502   \u2514\u2500\u2500\u2500main/resources                         \n\u2502   \u2502   \u2502   log4j2.properties           -&gt; Fichero de configuraci\u00f3n de la librer\u00eda log4j\n\u2502   \u2514\u2500\u2500\u2500test/java     \n\u2502           QualityGenCatTest.java      -&gt; Ejemplo Clase de prueba \n</code></pre> <ol> <li>Classes Diagram (UML)</li> </ol> <pre><code>classDiagram\n    class QualityGenCatTest {\n        +qualityGenCatTest()\n    }\n\n    class QualityGenCatPage {\n        -driver: WebDriver\n        -log: Logger\n        +QualityGenCatPage(driver: WebDriver, log: Logger)\n        +navigateTo()\n        +clickDestacatsLink()\n        +clickIniciLink()\n        +clickEinesLink()\n        +clickSeleniumLink()\n        +getTextDestacats(): String\n    }\n\n    class PageElements {\n        &lt;&lt;final&gt;&gt;\n        +qualitatGenCatUrl: String\n        +cttiCatUrl: String\n        &lt;&lt;final&gt;&gt;\n        +usernameCssLocator: By\n        &lt;&lt;final&gt;&gt;\n        +passwordCssLocator: By\n        &lt;&lt;final&gt;&gt;\n        +loginMenuButtonLocator: By\n        &lt;&lt;final&gt;&gt;\n        +loginButtonLocator: By\n        &lt;&lt;final&gt;&gt;\n        +destacatsLocator: By\n        &lt;&lt;final&gt;&gt;\n        +ejemploLocator: By\n        &lt;&lt;final&gt;&gt;\n        +einesLink: By\n        &lt;&lt;final&gt;&gt;\n        +seleniumLink: By\n        &lt;&lt;final&gt;&gt;\n        +iniciLink: By\n    }\n\n    class Init {\n        -driver: ThreadLocal&lt;RemoteWebDriver&gt;\n        +setup(browser: String)\n        +getDriver(): WebDriver\n        +tearDown()\n        +terminate()\n    }\n\n    class OptionsManager {\n        &lt;&lt;static&gt;&gt;\n        +getChromeOptions(): ChromeOptions\n        &lt;&lt;static&gt;&gt;\n        +getFirefoxOptions(): FirefoxOptions\n        &lt;&lt;static&gt;&gt;\n        +getEdgeOptions(): EdgeOptions\n    }\n\n    class CapabilityFactory {\n        +capabilities: Capabilities\n        +getCapabilities(browser: String): Capabilities\n    }\n\n    class Common {\n        -driver: WebDriver\n        +Common(driver: WebDriver)\n        +setSize()\n    }\n\n    class ExtentManager{\n        -static ExtentReports extent\n        -static ExtentSparkReporter sparkReporter\n        -static ThreadLocal&lt;ExtentTest&gt; extentTest\n        +static getInstance() : ExtentReports\n        +static createTest(testName : String) : ExtentTest\n        +static getTest() : ExtentTest\n        +static flushReports() : void\n    }\n\n    class ResultSender {\n        -static application2: String\n        -static token2: char[]\n        -static influxDBClient: InfluxDBClient\n        -static writeApi: WriteApiBlocking\n        +static send(point: Point)\n        +static getApplication(): String\n    }\n\n    class ExecutionListener implements ITestListener {\n        +onTestStart(iTestResult: ITestResult)\n        +onTestSuccess(iTestResult: ITestResult)\n        +onTestFailure(iTestResult: ITestResult)\n        +onTestSkipped(iTestResult: ITestResult)\n        +onTestFailedButWithinSuccessPercentage(iTestResult: ITestResult)\n        +onStart(iTestContext: ITestContext)\n        +onFinish(iTestContext: ITestContext)\n        -sendTestMethodStatus(iTestResult: ITestResult, context: ITestContext, status: String)\n        -sendTestClassStatus(iTestContext: ITestContext)\n    }\n\n    QualityGenCatTest --|&gt; Init\n    QualityGenCatTest --&gt; QualityGenCatPage\n    QualityGenCatTest --&gt; Common\n    QualityGenCatPage --&gt; PageElements\n    Init --&gt; CapabilityFactory\n    QualityGenCatTest --&gt; ExtentManager\n    CapabilityFactory --&gt; OptionsManager\n    ResultSender --|&gt; Init\n    ExecutionListener --|&gt; ITestListener\n\n\n</code></pre>"},{"location":"about/#usage-recomended","title":"Usage Recomended","text":"<p>Visit for more information: https://github.com/SeleniumHQ/docker-selenium/tree/trunk</p> <ol> <li>Clone the example repo:</li> </ol> <pre><code>git clone https://git.intranet.gencat.cat/devsecopsctti/functional-test.git\n</code></pre> <ol> <li>Modify properties is resources.properties file <pre><code>selenium.server.url.docker=http://admin:admin@selenium-router.selenium-grid:4444/wd/hub           //Selenium grid URL\nselenium.server.url.local=http://host.docker.internal:4444/wd/hub    \nselenium.driver.remoto = true\nselenium.geckodriver.local = C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\npassword = 1234\n\napplication=petclinic\nmaintainer=CTTI\n\n//InfluxDB\n\ntoken=N8q9E5ffCYlhJa0woci0\n#urlInfluxDB=http://influxdb.ctti-eks.aws\nurlInfluxDB=http://influxdb.monitor:8086\nbucket=selenium\ncompany=primary\n</code></pre></li> <li>Install Selenium Grid &amp; Launch Test Execution</li> </ol> <p><pre><code># Install Selenium Grid Mesh\ndocker-compose -f docker-compose-v3.yml up -d --scale chrome=1 --scale firefox=1 --scale edge=1\n\n# test project execution\n mvn clean package -Dbuildnumber=\"valor_build\" -Djobname=\"valor_job\"  -Denvironment=\"entorno\" -Durlgrid=\"http://localhost:4444/wd/hub\"\n</code></pre> 1. Las variables: <code>buildnumber, jobname</code>, son variables que ser\u00e1n actualizadas por Jenkins, pero en una ejecuci\u00f3n local pueden tener cualquier valor. 2. <code>environment</code>:tendr\u00e1 en valor del entorno donde se est\u00e1n ejecutando las pruebas p.e.: desarrollo, preproduccion, produccion. 3. <code>urlgrid</code>: es la url de Selenium Grid</p>"},{"location":"about/#quick-start-local-machine-not-dockerized","title":"Quick start (Local Machine not Dockerized)","text":"<ol> <li> <p>Download Selenium Server (Grid) from https://www.selenium.dev/downloads/</p> </li> <li> <p>Download Chrome And Firefox Drivers compatibles with your navigator versions and copy them in the same folder that Selenium Server jar</p> </li> <li> <p>Execute:</p> </li> </ol> <pre><code>java -jar selenium-server-4.10.0.jar standalone\n</code></pre> <ol> <li> <p>Open the url http://localhost:4444/wd/hub and check Selenium Grid is Up &amp; Running</p> </li> <li> <p>Modify properties is resources.properties file <pre><code>selenium.server.url.docker=http://localhost:4444/wd/hub\nselenium.server.url.local=http://host.docker.internal:4444/wd/hub    //if you are running test from a container you must put the url of your host, if not put localhost. Probably you must create some internal firewall rules like open 4444 port.\nselenium.driver.remoto = false\nselenium.geckodriver.local = C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\npassword = 1234\n\napplication=petclinic\nmaintainer=CTTI\n\n//InfluxDB\n\ntoken=N8q9E5ffCYlhJa0woci0\n#urlInfluxDB=http://influxdb.ctti-eks.aws\nurlInfluxDB=http://influxdb.monitor:8086\nbucket=selenium\ncompany=primary\n</code></pre></p> </li> <li>Test Project Execution</li> </ol> <pre><code>mvn clean package -Dbuildnumber=\"valor_build\" -Djobname=\"valor_job\"  -Denvironment=\"entorno\" -Durlgrid=\"http://localhost:4444/wd/hub\"\n</code></pre> <ol> <li>Test Project Execution in CI Tool</li> </ol> <p>Pass Selenium Grid Url as a Property</p> <pre><code>mvn clean package -Dbuildnumber=$BUILD_NUMBER -Djobname=$JOB_NAME  -Denvironment=\"entorno\" -Durlgrid=\"http://localhost:4444/wd/hub\"\n</code></pre>"},{"location":"about/#execution-modes","title":"Execution modes","text":""},{"location":"about/#standalone","title":"Standalone","text":"<p> Firefox  <pre><code>docker run -d -p 4444:4444 --shm-size=\"2g\" selenium/standalone-firefox:4.12.1-20230912\n</code></pre></p> <p> Chrome  <pre><code>docker run -d -p 4444:4444 --shm-size=\"2g\" selenium/standalone-chrome:4.12.1-20230912\n</code></pre></p> <p> Edge <pre><code>docker run -d -p 4444:4444 --shm-size=\"2g\" selenium/standalone-edge:4.12.1-20230912\n</code></pre></p> <p>Note: Only one Standalone container can run on port <code>4444</code> at the same time.</p>"},{"location":"about/#hub-and-nodes","title":"Hub and Nodes","text":"<p>There are different ways to run the images and create a Grid with a Hub and Nodes, check the following options.</p>"},{"location":"about/#docker-networking","title":"Docker networking","text":"<p>The Hub and Nodes will be created in the same network and they will recognize each other by their container name. A Docker network needs to be created as a first step.</p>"},{"location":"about/#macoslinux","title":"macOS/Linux","text":"<pre><code>$ docker network create grid\n$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-chrome:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-edge:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-firefox:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell","title":"Windows PowerShell","text":"<pre><code>$ docker network create grid\n$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `\n    --shm-size=\"2g\" `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    selenium/node-chrome:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `\n    --shm-size=\"2g\" `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    selenium/node-edge:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `\n    --shm-size=\"2g\" `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    selenium/node-firefox:4.12.1-20230912\n</code></pre> <p>When you are done using the Grid, and the containers have exited, the network can be removed with the following command:</p> <pre><code># Removes the grid network\n$ docker network rm grid\n</code></pre>"},{"location":"about/#using-different-machinesvms","title":"Using different machines/VMs","text":"<p>The Hub and Nodes will be created on different machines/VMs, they need to know each other's IPs to communicate properly. If more than one node will be running on the same Machine/VM, they must be configured to expose different ports.</p>"},{"location":"about/#hub-machinevm-1","title":"Hub - Machine/VM 1","text":"<pre><code>$ docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.12.1-20230912\n</code></pre>"},{"location":"about/#node-chrome-machinevm-2","title":"Node Chrome - Machine/VM 2","text":""},{"location":"about/#macoslinux_1","title":"macOS/Linux","text":"<pre><code>$ docker run -d -p 5555:5555 \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -e SE_NODE_HOST=&lt;ip-from-machine-2&gt; \\\n    selenium/node-chrome:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell_1","title":"Windows PowerShell","text":"<pre><code>$ docker run -d -p 5555:5555 `\n    --shm-size=\"2g\" `\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    -e SE_NODE_HOST=&lt;ip-from-machine-2&gt; `\n    selenium/node-chrome:4.12.1-20230912\n</code></pre>"},{"location":"about/#node-edge-machinevm-3","title":"Node Edge - Machine/VM 3","text":""},{"location":"about/#macoslinux_2","title":"macOS/Linux","text":"<pre><code>$ docker run -d -p 5555:5555 \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -e SE_NODE_HOST=&lt;ip-from-machine-3&gt; \\\n    selenium/node-edge:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell_2","title":"Windows PowerShell","text":"<pre><code>$ docker run -d -p 5555:5555 `\n    --shm-size=\"2g\" `\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    -e SE_NODE_HOST=&lt;ip-from-machine-3&gt; `\n    selenium/node-edge:4.12.1-20230912\n</code></pre>"},{"location":"about/#node-firefox-machinevm-4","title":"Node Firefox - Machine/VM 4","text":""},{"location":"about/#macoslinux_3","title":"macOS/Linux","text":"<pre><code>$ docker run -d -p 5555:5555 \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -e SE_NODE_HOST=&lt;ip-from-machine-4&gt; \\\n    selenium/node-firefox:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell_3","title":"Windows PowerShell","text":"<pre><code>$ docker run -d -p 5555:5555 `\n    --shm-size=\"2g\" `\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    -e SE_NODE_HOST=&lt;ip-from-machine-4&gt; `\n    selenium/node-firefox:4.12.1-20230912\n</code></pre>"},{"location":"about/#node-chrome-machinevm-4","title":"Node Chrome - Machine/VM 4","text":""},{"location":"about/#macoslinux_4","title":"macOS/Linux","text":"<pre><code>$ docker run -d -p 5556:5556 \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -e SE_NODE_HOST=&lt;ip-from-machine-4&gt; \\\n    -e SE_NODE_PORT=5556 \\\n    selenium/node-chrome:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell_4","title":"Windows PowerShell","text":"<pre><code>$ docker run -d -p 5556:5556 `\n    --shm-size=\"2g\" `\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    -e SE_NODE_HOST=&lt;ip-from-machine-4&gt; `\n    -e SE_NODE_PORT=5556 `\n    selenium/node-chrome:4.12.1-20230912\n</code></pre>"},{"location":"about/#docker-compose","title":"Docker Compose","text":"<p>Visit offical github repository mentioned above in order to obtain yaml files!</p> <p>Docker Compose is the simplest way to start a Grid. Use the linked resources below, save them locally and check the execution instructions on top of each file.</p>"},{"location":"about/#version-2","title":"Version 2","text":"<p><code>docker-compose-v2.yml</code></p>"},{"location":"about/#version-3","title":"Version 3","text":"<p><code>docker-compose-v3.yml</code></p> <p>To stop the Grid and cleanup the created containers, run <code>docker-compose down</code>.</p>"},{"location":"about/#version-3-with-swarm-support","title":"Version 3 with Swarm support","text":"<p><code>docker-compose-v3-swarm.yml</code></p>"},{"location":"about/#fully-distributed-mode-router-queue-distributor-eventbus-sessionmap-and-nodes","title":"Fully distributed mode - Router, Queue, Distributor, EventBus, SessionMap and Nodes","text":"<p>It is possible to start a Selenium Grid with all its components apart. For simplicity, only an example with docker-compose will be provided. Save the file locally, and check the execution  instructions on top of it.</p> <p><code>docker-compose-v3-full-grid.yml</code></p>"},{"location":"about/#video-recording","title":"Video recording","text":"<p>Tests execution can be recorded by using the <code>selenium/video:ffmpeg-4.3.1-20230912</code> Docker image. One container is needed per each container where a browser is running. This means if you are running 5 Nodes/Standalone containers, you will need 5 video containers, the mapping is 1-1.</p> <p>Currently, the only way to do this mapping is manually (either starting the containers manually or through <code>docker-compose</code>). We are iterating on this process and probably this setup will be more simple in the future.</p> <p>The video Docker image we provide is based on the ffmpeg Ubuntu image provided by the  jrottenberg/ffmpeg project, thank you for providing this image and simplifying our work </p> <p>Notes: - If you have questions or feedback, please use the community contact points shown here.  - Please report any bugs through GitHub issues, and provide all the information requested on the template. - Video recording for headless browsers is not supported.  - Video recording tends to use considerable amounts of CPU. Normally you should estimate 1CPU per video container,  and 1 CPU per browser container. - Videos are stored in the <code>/videos</code> directory inside the video container. Map a local directory to get the videos. - If you are running more than one video container, be sure to overwrite the video file name through the <code>FILE_NAME</code> environment variable to avoid unexpected results.</p> <p>This example shows how to start the containers manually:</p> <p><pre><code>$ docker network create grid\n$ docker run -d -p 4444:4444 -p 6900:5900 --net grid --name selenium --shm-size=\"2g\" selenium/standalone-chrome:4.12.1-20230912\n$ docker run -d --net grid --name video -v /tmp/videos:/videos selenium/video:ffmpeg-4.3.1-20230912\n# Run your tests\n$ docker stop video &amp;&amp; docker rm video\n$ docker stop selenium &amp;&amp; docker rm selenium\n</code></pre> After the containers are stopped and removed, you should see a video file on your machine's <code>/tmp/videos</code> directory.</p> <p>Here is an example using a Hub and a few Nodes:</p> <p><code>docker-compose-v3-video.yml</code></p>"},{"location":"about/#dynamic-grid","title":"Dynamic Grid","text":"<p>Grid 4 has the ability to start Docker containers on demand, this means that it starts a Docker container in the background for each new session request, the test gets executed there, and when the test completes, the container gets thrown away.</p> <p>This execution mode can be used either in the Standalone or Node roles. The \"dynamic\" execution mode needs to be told what Docker images to use when the containers get started. Additionally, the Grid needs to know the URI of the Docker daemon. This configuration can be placed in a local <code>toml</code> file.</p>"},{"location":"about/#configuration-example","title":"Configuration example","text":"<p>You can save this file locally and name it, for example, <code>config.toml</code>. <pre><code>[docker]\n# Configs have a mapping between the Docker image to use and the capabilities that need to be matched to\n# start a container with the given image.\nconfigs = [\n    \"selenium/standalone-firefox:4.12.1-20230912\", '{\"browserName\": \"firefox\"}',\n    \"selenium/standalone-chrome:4.12.1-20230912\", '{\"browserName\": \"chrome\"}',\n    \"selenium/standalone-edge:4.12.1-20230912\", '{\"browserName\": \"MicrosoftEdge\"}'\n]\n\n# URL for connecting to the docker daemon\n# Most simple approach, leave it as http://127.0.0.1:2375, and mount /var/run/docker.sock.\n# 127.0.0.1 is used because internally the container uses socat when /var/run/docker.sock is mounted \n# If var/run/docker.sock is not mounted: \n# Windows: make sure Docker Desktop exposes the daemon via tcp, and use http://host.docker.internal:2375.\n# macOS: install socat and run the following command, socat -4 TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock,\n# then use http://host.docker.internal:2375.\n# Linux: varies from machine to machine, please mount /var/run/docker.sock. If this does not work, please create an issue.\nurl = \"http://127.0.0.1:2375\"\n# Docker image used for video recording\nvideo-image = \"selenium/video:ffmpeg-4.3.1-20230912\"\n\n# Uncomment the following section if you are running the node on a separate VM\n# Fill out the placeholders with appropriate values\n#[server]\n#host = &lt;ip-from-node-machine&gt;\n#port = &lt;port-from-node-machine&gt;\n</code></pre></p>"},{"location":"about/#execution-with-hub-node-roles","title":"Execution with Hub &amp; Node roles","text":"<p>This can be expanded to a full Grid deployment, all components deployed individually. The overall idea is to have the Hub in one virtual machine, and each of the Nodes in separate and more powerful virtual machines. </p>"},{"location":"about/#macoslinux_5","title":"macOS/Linux","text":"<pre><code>$ docker network create grid\n$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -v ${PWD}/config.toml:/opt/bin/config.toml \\\n    -v ${PWD}/assets:/opt/selenium/assets \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    selenium/node-docker:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell_5","title":"Windows PowerShell","text":"<pre><code>$ docker network create grid\n$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    -v ${PWD}/config.toml:/opt/bin/config.toml `\n    -v ${PWD}/assets:/opt/selenium/assets `\n    -v /var/run/docker.sock:/var/run/docker.sock `\n    selenium/node-docker:4.12.1-20230912\n</code></pre> <p>To have the assets saved on your host, please mount your host path to <code>/opt/selenium/assets</code>.</p> <p>When you are done using the Grid, and the containers have exited, the network can be removed with the following command:</p> <pre><code># Removes the grid network\n$ docker network rm grid\n</code></pre>"},{"location":"about/#execution-with-standalone-roles","title":"Execution with Standalone roles","text":""},{"location":"about/#macoslinux_6","title":"macOS/Linux","text":"<pre><code>docker run --rm --name selenium-docker -p 4444:4444 \\\n    -v ${PWD}/config.toml:/opt/bin/config.toml \\\n    -v ${PWD}/assets:/opt/selenium/assets \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    selenium/standalone-docker:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell_6","title":"Windows PowerShell","text":"<pre><code>docker run --rm --name selenium-docker -p 4444:4444 `\n    -v ${PWD}/config.toml:/opt/bin/config.toml `\n    -v ${PWD}/assets:/opt/selenium/assets `\n    -v /var/run/docker.sock:/var/run/docker.sock `\n    selenium/standalone-docker:4.12.1-20230912\n</code></pre>"},{"location":"about/#using-dynamic-grid-in-different-machinesvms","title":"Using Dynamic Grid in different machines/VMs","text":""},{"location":"about/#hub-machinevm-1_1","title":"Hub - Machine/VM 1","text":"<pre><code>$ docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.12.1-20230912\n</code></pre>"},{"location":"about/#node-chrome-machinevm-2_1","title":"Node Chrome - Machine/VM 2","text":""},{"location":"about/#macoslinux_7","title":"macOS/Linux","text":"<pre><code>$ docker run -d -p 5555:5555 \\\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    -v ${PWD}/config.toml:/opt/bin/config.toml \\\n    -v ${PWD}/assets:/opt/selenium/assets \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    selenium/node-docker:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell_7","title":"Windows PowerShell","text":"<pre><code>$ docker run -d -p 5555:5555 `\n    -e SE_EVENT_BUS_HOST=&lt;ip-from-machine-1&gt; `\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `\n    -v ${PWD}/config.toml:/opt/bin/config.toml `\n    -v ${PWD}/assets:/opt/selenium/assets `\n    -v /var/run/docker.sock:/var/run/docker.sock `\n    selenium/node-docker:4.12.1-20230912\n</code></pre> <p>Complete the <code>[server]</code> section in the <code>config.toml</code> file. <pre><code>[docker]\n# Configs have a mapping between the Docker image to use and the capabilities that need to be matched to\n# start a container with the given image.\nconfigs = [\n    \"selenium/standalone-firefox:4.12.1-20230912\", \"{\\\"browserName\\\": \\\"firefox\\\"}\",\n    \"selenium/standalone-chrome:4.12.1-20230912\", \"{\\\"browserName\\\": \\\"chrome\\\"}\",\n    \"selenium/standalone-edge:4.12.1-20230912\", \"{\\\"browserName\\\": \\\"MicrosoftEdge\\\"}\"\n    ]\n\n# URL for connecting to the docker daemon\n# Most simple approach, leave it as http://127.0.0.1:2375, and mount /var/run/docker.sock.\n# 127.0.0.1 is used because interally the container uses socat when /var/run/docker.sock is mounted \n# If var/run/docker.sock is not mounted: \n# Windows: make sure Docker Desktop exposes the daemon via tcp, and use http://host.docker.internal:2375.\n# macOS: install socat and run the following command, socat -4 TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock,\n# then use http://host.docker.internal:2375.\n# Linux: varies from machine to machine, please mount /var/run/docker.sock. If this does not work, please create an issue.\nurl = \"http://127.0.0.1:2375\"\n# Docker image used for video recording\nvideo-image = \"selenium/video:ffmpeg-4.3.1-20230912\"\n\n# Uncomment the following section if you are running the node on a separate VM\n# Fill out the placeholders with appropriate values\n[server]\nhost = &lt;ip-from-node-machine&gt;\nport = &lt;port-from-node-machine&gt;\n</code></pre></p> <p>To have the assets saved on your host, please mount your host path to <code>/opt/selenium/assets</code>.</p>"},{"location":"about/#execution-with-docker-compose","title":"Execution with Docker Compose","text":"<p>Here is an example using a Hub and a Node:</p> <p><code>docker-compose-v3-dynamic-grid.yml</code></p>"},{"location":"about/#configuring-the-child-containers","title":"Configuring the child containers","text":"<p>Containers can be further configured through environment variables, such as <code>SE_NODE_SESSION_TIMEOUT</code> and <code>SE_OPTS</code>. When a child container is created, all environment variables prefixed with <code>SE_</code> will be forwared and set in the container. You can set the desired environment variables in the  <code>standalone-docker</code> or <code>node-docker</code> containers. The following example sets the session timeout to 700 seconds for all sessions:</p>"},{"location":"about/#macoslinux_8","title":"macOS/Linux","text":"<pre><code>docker run --rm --name selenium-docker -p 4444:4444 \\\n    -e SE_NODE_SESSION_TIMEOUT=700 \\\n    -v ${PWD}/config.toml:/opt/bin/config.toml \\\n    -v ${PWD}/assets:/opt/selenium/assets \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    selenium/standalone-docker:4.12.1-20230912\n</code></pre>"},{"location":"about/#windows-powershell_8","title":"Windows PowerShell","text":"<pre><code>docker run --rm --name selenium-docker -p 4444:4444 `\n    -e SE_NODE_SESSION_TIMEOUT=700 `\n    -v ${PWD}/config.toml:/opt/bin/config.toml `\n    -v ${PWD}/assets:/opt/selenium/assets `\n    -v /var/run/docker.sock:/var/run/docker.sock `\n    selenium/standalone-docker:4.12.1-20230912\n</code></pre>"},{"location":"about/#video-recording-screen-resolution-and-time-zones-in-a-dynamic-grid","title":"Video recording, screen resolution, and time zones in a Dynamic Grid","text":"<p>To record your WebDriver session, you need to add a <code>se:recordVideo</code>  field set to <code>true</code>. You can also set a time zone and a screen resolution, for example:</p> <pre><code>{\n  \"browserName\": \"firefox\",\n  \"platformName\": \"linux\",\n  \"se:recordVideo\": \"true\",\n  \"se:timeZone\": \"US/Pacific\",\n  \"se:screenResolution\": \"1920x1080\"  \n}\n</code></pre> <p>After running a test, check the path you mounted to the Docker container,  (<code>${PWD}/assets</code>), and you should see videos and session information. </p>"},{"location":"about/#deploying-to-kubernetes","title":"Deploying to Kubernetes","text":"<p>We offer a Helm chart to deploy these Docker images to Kubernetes. Read more details at the Helm readme.</p>"},{"location":"about/#configuring-the-containers","title":"Configuring the containers","text":""},{"location":"about/#se_opts-selenium-configuration-options","title":"SE_OPTS Selenium Configuration Options","text":"<p>You can pass <code>SE_OPTS</code> variable with additional command line parameters for starting a hub or a node.</p> <pre><code>$ docker run -d -p 4444:4444 -e SE_OPTS=\"--log-level FINE\" --name selenium-hub selenium/hub:4.12.1-20230912\n</code></pre>"},{"location":"about/#se_java_opts-java-environment-options","title":"SE_JAVA_OPTS Java Environment Options","text":"<p>You can pass <code>SE_JAVA_OPTS</code> environment variable to the Java process.</p> <pre><code>$ docker run -d -p 4444:4444 -e SE_JAVA_OPTS=-Xmx512m --name selenium-hub selenium/hub:4.12.1-20230912\n</code></pre>"},{"location":"about/#node-configuration-options","title":"Node configuration options","text":"<p>The Nodes register themselves through the Event Bus. When the Grid is started in its typical Hub/Node setup, the Hub will be the one acting as the Event Bus, and when the Grid is started with all its five elements apart, the Event Bus will be running on its own.</p> <p>In both cases, it is necessary to tell the Node where the Event Bus is, so it can register itself. That is the purpose of the <code>SE_EVENT_BUS_HOST</code>, <code>SE_EVENT_BUS_PUBLISH_PORT</code> and <code>SE_EVENT_BUS_SUBSCRIBE_PORT</code> environment variables.</p> <p>In some cases, for example, if you want to tag a node, it might be necessary to supply a custom stereotype to the node config. The environment variable <code>SE_NODE_STEREOTYPE</code> sets the stereotype entry in the node's <code>config.toml</code>. An example config.toml file can be found here: Setting custom capabilities for matching specific Nodes.</p> <p>Here is an example with the default values of these environment variables: <pre><code>$ docker run -d \\\n  -e SE_EVENT_BUS_HOST=&lt;event_bus_ip|event_bus_name&gt; \\\n  -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n  -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 -e SE_NODE_STEREOTYPE=\"{\\\"browserName\\\":\\\"${SE_NODE_BROWSER_NAME}\\\",\\\"browserVersion\\\":\\\"${SE_NODE_BROWSER_VERSION}\\\",\\\"platformName\\\": \\\"Linux\\\"}\" \\\n  --shm-size=\"2g\" selenium/node-chrome:4.12.1-20230912\n</code></pre></p>"},{"location":"about/#setting-sub-path","title":"Setting Sub Path","text":"<p>By default, Selenium is reachable at <code>http://127.0.0.1:4444/</code>. Selenium can be configured to use a custom subpath by specifying the <code>SE_SUB_PATH</code> environmental variable. In the example below Selenium is reachable at <code>http://127.0.0.1:4444/selenium-grid/</code></p> <pre><code>$ docker run -d -p 4444:4444 -e SE_SUB_PATH=/selenium-grid/ --name selenium-hub selenium/hub:4.9.0-20230421\n</code></pre>"},{"location":"about/#setting-screen-resolution","title":"Setting Screen Resolution","text":"<p>By default, nodes start with a screen resolution of 1360 x 1020 with a color depth of 24 bits and a dpi of 96.  These settings can be adjusted by specifying <code>SE_SCREEN_WIDTH</code>, <code>SE_SCREEN_HEIGHT</code>, <code>SE_SCREEN_DEPTH</code>, and/or <code>SE_SCREEN_DPI</code>  environmental variables when starting the container.</p> <pre><code>docker run -d -e SE_SCREEN_WIDTH=1366 -e SE_SCREEN_HEIGHT=768 -e SE_SCREEN_DEPTH=24 -e SE_SCREEN_DPI=74 selenium/standalone-firefox:4.12.1-20230912\n</code></pre>"},{"location":"about/#grid-url-and-session-timeout","title":"Grid Url and Session Timeout","text":"<p>In some use cases, you might need to set the Grid URL to the Node, for example, if you'd like to access the BiDi/CDP endpoint.  This is also needed when you want to use the new <code>RemoteWebDriver.builder()</code> or <code>Augmenter()</code> present in Selenium 4  (since they setup the BiDi/CDP connection implicitly). You can do that through the <code>SE_NODE_GRID_URL</code> environment  variable. Setting this env var is needed if you want to see the live view while sessions are executing.</p> <p>Grid has a default session timeout of 300 seconds, where the session can be in a stale state until it is killed. You can use <code>SE_NODE_SESSION_TIMEOUT</code> to overwrite that value in seconds.</p>"},{"location":"about/#session-request-timeout","title":"Session request timeout","text":"<p>A new session request is placed in the Session Queue before it is processed, and the request sits in the queue until a matching slot is found across the registered Nodes. However, the new session request might timeout if no slot was found. By default, a  request will stay in the queue for up to 300 seconds before it a timeout is reached. In addition, an attempt to process the request is done every 5 seconds (by default).</p> <p>It is possible to override those values through environment variables in the Hub and the SessionQueue (<code>SE_SESSION_REQUEST_TIMEOUT</code> and <code>SE_SESSION_RETRY_INTERVAL</code>). For example, a timeout of 500 seconds would be <code>SE_SESSION_REQUEST_TIMEOUT=500</code> and a retry  interval of 2 seconds would be <code>SE_SESSION_RETRY_INTERVAL=2</code>.</p>"},{"location":"about/#increasing-session-concurrency-per-container","title":"Increasing session concurrency per container","text":"<p>By default, only one session is configured to run per container through the <code>SE_NODE_MAX_SESSIONS</code> environment variable. It is possible to increase that number up to the maximum available processors, this is because more stability is achieved when one container/browser has 1 CPU to run. </p> <p>However, if you have measured performance and based on that, you think more sessions can be executed in each container, you can override the maximum limit by setting both <code>SE_NODE_MAX_SESSIONS</code> to a desired number and <code>SE_NODE_OVERRIDE_MAX_SESSIONS</code> to  <code>true</code>. Nevertheless, running more browser sessions than the available processors is not recommended since you will be overloading the resources.</p> <p>Overriding this setting has an undesired side effect when video recording is enabled since more than one browser session might be captured in the same video.</p>"},{"location":"about/#running-in-headless-mode","title":"Running in Headless mode","text":"<p>Firefox,  Chrome,  When using headless mode, there's no need for the Xvfb server to be started.</p> <p>To avoid starting the server you can set the <code>START_XVFB</code> environment variable to <code>false</code>  (or any other value than <code>true</code>), for example:</p> <pre><code>$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n  -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 -e START_XVFB=false --shm-size=\"2g\" selenium/node-chrome:4.12.1-20230912\n</code></pre> <p>For more information, see this GitHub issue.</p>"},{"location":"about/#stopping-the-nodestandalone-after-n-sessions-have-been-executed","title":"Stopping the Node/Standalone after N sessions have been executed","text":"<p>In some environments, like Docker Swarm or Kubernetes, it is useful to shut down the Node or Standalone container after N tests have been executed. For example, this can be used in Kubernetes to terminate the pod and then scale a new one after N sessions. Set the environment variable <code>SE_DRAIN_AFTER_SESSION_COUNT</code> to a value higher than zero to enable this behaviour. </p> <pre><code>$ docker run -e SE_DRAIN_AFTER_SESSION_COUNT=5 --shm-size=\"2g\" selenium/standalone-firefox:4.12.1-20230912\n</code></pre> <p>With the previous command, the Standalone container will shut down after 5 sessions have been executed.</p>"},{"location":"about/#building-the-images","title":"Building the images","text":"<p>Clone the repo and from the project directory root you can build everything by running:</p> <pre><code>$ VERSION=local make build\n</code></pre> <p>If you need to configure environment variables in order to build the image (http proxy for instance),  simply set an environment variable <code>BUILD_ARGS</code> that contains the additional variables to pass to the  docker context (this will only work with docker &gt;= 1.9)</p> <pre><code>$ BUILD_ARGS=\"--build-arg http_proxy=http://acme:3128 --build-arg https_proxy=http://acme:3128\" make build\n</code></pre> <p>Note: Omitting <code>VERSION=local</code> will build the images with the released version but replacing the date for the  current one.</p>"},{"location":"about/#waiting-for-the-grid-to-be-ready","title":"Waiting for the Grid to be ready","text":"<p>It is a good practice to check first if the Grid is up and ready to receive requests, this can be done by checking the <code>/wd/hub/status</code> endpoint.</p> <p>A Grid that is ready, composed of a hub and two nodes, could look like this:</p> <pre><code>{\n  \"value\": {\n    \"ready\": true,\n    \"message\": \"Selenium Grid ready.\",\n    \"nodes\": [\n      {\n        \"id\": \"6c0a2c59-7e99-469d-bbfc-313dc638797c\",\n        \"uri\": \"http:\\u002f\\u002f172.19.0.3:5555\",\n        \"maxSessions\": 4,\n        \"stereotypes\": [\n          {\n            \"capabilities\": {\n              \"browserName\": \"firefox\"\n            },\n            \"count\": 4\n          }\n        ],\n        \"sessions\": [\n        ]\n      },\n      {\n        \"id\": \"26af3363-a0d8-4bd6-a854-2c7497ed64a4\",\n        \"uri\": \"http:\\u002f\\u002f172.19.0.4:5555\",\n        \"maxSessions\": 4,\n        \"stereotypes\": [\n          {\n            \"capabilities\": {\n              \"browserName\": \"chrome\"\n            },\n            \"count\": 4\n          }\n        ],\n        \"sessions\": [\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>The <code>\"ready\": true</code> value indicates that the Grid is ready to receive requests. This status can be polled through a script before running any test, or it can be added as a HEALTHCHECK when the docker container is started.</p>"},{"location":"about/#adding-a-healthcheck-to-the-grid","title":"Adding a HEALTHCHECK to the Grid","text":"<p>The script check-grid.sh, which is included in the images, can be used to poll the Grid status.</p> <p>This example checks the status of the Grid every 15 seconds, it has a timeout of 30 seconds when the check is done, and it retries up to 5 times until the container is marked as unhealthy. Please use adjusted values to fit your needs, (if needed) replace the <code>--host</code> and <code>--port</code> parameters for the ones used in your environment.</p> <p><pre><code>$ docker network create grid\n$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub \\\n  --health-cmd='/opt/bin/check-grid.sh --host 0.0.0.0 --port 4444' \\\n  --health-interval=15s --health-timeout=30s --health-retries=5 \\\n  selenium/hub:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-chrome:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-edge:4.12.1-20230912\n$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-firefox:4.12.1-20230912\n</code></pre> Note: The <code>\\</code> line delimiter won't work on Windows-based terminals, try either <code>^</code> or a backtick.</p> <p>The container health status can be checked by doing <code>docker ps</code> and verifying the <code>(healthy)|(unhealthy)</code> status or by inspecting it in the following way:</p> <pre><code>$ docker inspect --format='{{json .State.Health.Status}}' selenium-hub\n\"healthy\"\n</code></pre>"},{"location":"about/#using-a-bash-script-to-wait-for-the-grid","title":"Using a bash script to wait for the Grid","text":"<p>A common problem known in docker is that a running container does not always mean that the application inside it is ready. A simple way to tackle this is by using a \"wait-for-it\" script, more information can be seen here.</p> <p>The following script is an example of how this can be done using bash, but the same principle applies if you want to do this with the programming language used to write the tests. In the example below, the script will poll the status endpoint every second. If the grid does not become ready within 30 seconds, the script will exit with an error code.</p> <pre><code>#!/bin/bash\n# wait-for-grid.sh\n\nset -e\nurl=\"http://localhost:4444/wd/hub/status\"\nwait_interval_in_seconds=1\nmax_wait_time_in_seconds=30\nend_time=$((SECONDS + max_wait_time_in_seconds))\ntime_left=$max_wait_time_in_seconds\n\nwhile [ $SECONDS -lt $end_time ]; do\n    response=$(curl -sL \"$url\" | jq -r '.value.ready')\n    if [ -n \"$response\"  ]  &amp;&amp; [ \"$response\" ]; then\n        echo \"Selenium Grid is up - executing tests\"\n        break\n    else\n        echo \"Waiting for the Grid. Sleeping for $wait_interval_in_seconds second(s). $time_left seconds left until timeout.\"\n        sleep $wait_interval_in_seconds\n        time_left=$((time_left - wait_interval_in_seconds))\n    fi\ndone\n\nif [ $SECONDS -ge $end_time ]; then\n    echo \"Timeout: The Grid was not started within $max_wait_time_in_seconds seconds.\"\n    exit 1\nfi\n</code></pre> <p>Will require <code>jq</code> installed via <code>apt-get</code>, else the script will keep printing <code>Waiting</code> without completing the execution.</p> <p>Note: If needed, replace <code>localhost</code> and <code>4444</code> for the correct values in your environment. Also, this script is polling indefinitely, you might want to tweak it and establish a timeout.</p> <p>Let's say that the normal command to execute your tests is <code>mvn clean test</code>. Here is a way to use the above script and execute your tests:</p> <pre><code>$ ./wait-for-grid.sh mvn clean test\n</code></pre> <p>Like this, the script will poll until the Grid is ready, and then your tests will start.</p>"},{"location":"about/#install-certificates-for-chromium-based-browsers","title":"Install certificates for Chromium-based browsers","text":"<p>If you need to install custom certificates, CA, intermediate CA, or client certificates (for example enterprise internal CA) you can use the different utils that come from libnss3-tools. The chromium-based browser uses nssdb as a certificate store. Create a new nssdb: <pre><code>certutil -d sql:$HOME/.pki/nssdb -N\n</code></pre> For example, to trust a root CA certificate for issuing SSL server certificates, use <pre><code>certutil -d sql:$HOME/.pki/nssdb -A -t \"C,,\" -n &lt;certificate nickname&gt; -i &lt;certificate filename&gt;\n</code></pre> To import an intermediate CA certificate, use <pre><code>certutil -d sql:$HOME/.pki/nssdb -A -t \",,\" -n &lt;certificate nickname&gt; -i &lt;certificate filename&gt;\n</code></pre> You can find more information here Usage example: If your company has an internal CA you can create your own dockerimage from selenium node image. You can then install all required internal certificates in your Dockerfile like this: <pre><code>FROM selenium/node-edge:latest\nUSER root\nCOPY certs/ /etc/certs # copy over the certificate file\n\n#=========\n# libnss3-tools\n# Network Security Service tools\n# Manage certificates in nssdb (certutil, pk12util, modutil, shlibsign, signtool, ssltap)\n#=========\nRUN apt-get update -qqy \\\n  &amp;&amp; apt-get -qqy install \\\n    libnss3-tools \\\n  &amp;&amp; rm -rf /var/lib/apt/lists/* /var/cache/apt/*\n\nRUN mkdir -p -m755 /home/seluser/.pki/nssdb \\ #create nssdb folder\n    &amp;&amp; certutil -d sql:/home/seluser/.pki/nssdb -N --empty-password \\ # create new db without password\n    &amp;&amp; certutil -d sql:/home/seluser/.pki/nssdb -A -t \"C,,\" -n companyca -i /etc/certs/companeca.pem \\ #trust company CA\n    &amp;&amp; pk12util -d sql:/home/seluser/.pki/nssdb -i client_cert.p12 -W password_of_clent_cert # client certificate install\n</code></pre> This way the certificates will be installed and the node will start automatically as before.</p>"},{"location":"about/#alternative-method-add-certificates-to-existing-selenium-based-images-for-browsers","title":"Alternative method: Add certificates to existing Selenium based images for browsers","text":"<p>As an alternative, you can add your certificate files to existing Selenium images. This practical example assumes you have a known image to use as a build image and have a way to publish new images to your local docker registry.</p> <p>This example uses a RedHat-based distro as a build image (Rocky Linux) but it can be any Linux image of your choice. Please note that build instruction will vary between distributions. You can check the instructions for Ubuntu in the previous example.</p> <p>The example also assumes your internal CA is already in /etc/pki/ca-trust/source/anchors/YOUR_CA.pem, the default location for Rocky Linux. Alternatively, you can also provide these files from your host and  copy them into the build image.</p> <p>For Chrome and Edge browsers, the recipe is the same, just adapt the image name (node-chrome or node-edge): <pre><code># Get a standard image for creating nssdb file\nFROM rockylinux:8.6 as build\nRUN yum install -y nss-tools\nRUN mkdir -p -m755 /seluser/.pki/nssdb \\\n    &amp;&amp; certutil -d sql:/seluser/.pki/nssdb -N --empty-password \\\n    &amp;&amp; certutil -d sql:/seluser/.pki/nssdb -A -t \"C,,\" -n YOUR_CA -i /etc/pki/ca-trust/source/anchors/YOUR_CA.pem \\\n    &amp;&amp; chown -R 1200:1201 /seluser\n\n# Start from Selenium image and add relevant files from build image\nFROM selenium/node-chrome:4.12.1-20230912\nUSER root\nCOPY --from=build /seluser/ /home/seluser/\nUSER seluser\n</code></pre></p> <p>Example for Firefox: <pre><code># Get a standard image for working on\nFROM rockylinux:8.6 as build\nRUN mkdir -p \"/distribution\" \"/certs\" &amp;&amp; \\\n    cp /etc/pki/ca-trust/source/anchors/YOUR_CA*.pem /certs/ &amp;&amp; \\\n    echo '{ \"policies\": { \"Certificates\": { \"Install\": [\"/opt/firefox-latest/YOUR_CA.pem\"] }} }' &gt;\"/distribution/policies.json\"\n\n# Start from Selenium image and add relevant files from build image\nFROM selenium/node-firefox:4.12.1-20230912\nUSER root\nCOPY --from=build /certs /opt/firefox-latest\nCOPY --from=build /distribution /opt/firefox-latest/distribution\nUSER seluser\n</code></pre></p>"},{"location":"about/#debugging","title":"Debugging","text":"<p>This project uses x11vnc as a VNC server to allow users to inspect what is happening inside the container. Users can connect to this server in two ways:</p>"},{"location":"about/#using-a-vnc-client","title":"Using a VNC client","text":"<p>The VNC server is listening to port 5900, you can use a VNC client and connect to it. Feel free to map port 5900 to  any free external port that you wish.</p> <p>The internal 5900 port remains the same because that is the configured port for the VNC server running inside the container.  You can override it with the <code>SE_VNC_PORT</code> environment variable in case you want to use <code>--net=host</code>.</p> <p>Here is an example with the standalone images, the same concept applies to the node images. <pre><code>$ docker run -d -p 4444:4444 -p 5900:5900 --shm-size=\"2g\" selenium/standalone-chrome:4.12.1-20230912\n$ docker run -d -p 4445:4444 -p 5901:5900 --shm-size=\"2g\" selenium/standalone-edge:4.12.1-20230912\n$ docker run -d -p 4446:4444 -p 5902:5900 --shm-size=\"2g\" selenium/standalone-firefox:4.12.1-20230912\n</code></pre></p> <p>Then, you would use in your VNC client: - Port 5900 to connect to the Chrome container - Port 5901 to connect to the Edge container - Port 5902 to connect to the Firefox container</p> <p>If you get a prompt asking for a password, it is: <code>secret</code>. If you wish to change this,  you can set the environment variable <code>SE_VNC_PASSWORD</code>.</p> <p>If you want to run VNC without password authentication you can set the environment variable <code>SE_VNC_NO_PASSWORD=1</code>.</p> <p>If you want to run VNC in view-only mode you can set the environment variable <code>SE_VNC_VIEW_ONLY=1</code>.</p>"},{"location":"about/#using-your-browser-no-vnc-client-is-needed","title":"Using your browser (no VNC client is needed)","text":"<p>This project uses noVNC to allow users to inspect visually container activity with their browser. This might come in handy if you cannot install a VNC client on your machine. Port 7900 is used to start noVNC, so you will need to connect to that port with your browser.</p> <p>Similarly to the previous section, feel free to map port 7900 to any free external port that you wish. You can also override it with the <code>SE_NO_VNC_PORT</code> environment variable in case you want to use <code>--net=host</code>.</p> <p>Here is an example with the standalone images, the same concept applies to the node images. <pre><code>$ docker run -d -p 4444:4444 -p 7900:7900 --shm-size=\"2g\" selenium/standalone-chrome:4.12.1-20230912\n$ docker run -d -p 4445:4444 -p 7901:7900 --shm-size=\"2g\" selenium/standalone-edge:4.12.1-20230912\n$ docker run -d -p 4446:4444 -p 7902:7900 --shm-size=\"2g\" selenium/standalone-firefox:4.12.1-20230912\n</code></pre></p> <p>Then, you would use in your browser: - http://localhost:7900/ to connect to the Chrome container - http://localhost:7901/ to connect to the Edge container - http://localhost:7902/ to connect to the Firefox container</p> <p>If you get a prompt asking for a password, it is: <code>secret</code>.</p>"},{"location":"about/#disabling-vnc","title":"Disabling VNC","text":"<p>If You are running low on resources, or simply don't need to inspect running sessions, it is possible to not run VNC at all. Just set  <code>SE_START_VNC=false</code> environment variable on the grid startup.</p>"},{"location":"about/#tracing-in-grid","title":"Tracing in Grid","text":"<p>In order to enable tracing in the Selenium Grid container, the following commands can be executed:</p> <pre><code>docker network create grid\ndocker run -d -p 16686:16686 -p 14250:14250 --net grid --name jaeger jaegertracing/all-in-one:1.17\ndocker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.12.1-20230912\ndocker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_ENABLE_TRACING=true \\\n    -e JAVA_OPTS=\"-Dotel.traces.exporter=jaeger -Dotel.exporter.jaeger.endpoint=http://jaegar:14250 -Dotel.resource.attributes=service.name=selenium-hub\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-chrome:4.12.1-20230912\ndocker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_ENABLE_TRACING=true \\\n    -e JAVA_OPTS=\"-Dotel.traces.exporter=jaeger -Dotel.exporter.jaeger.endpoint=http://jaegar:14250 -Dotel.resource.attributes=service.name=selenium-node-edge\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-edge:4.12.1-20230912\ndocker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=\"2g\" \\\n    -e SE_ENABLE_TRACING=true \\\n    -e JAVA_OPTS=\"-Dotel.traces.exporter=jaeger -Dotel.exporter.jaeger.endpoint=http://jaegar:14250 -Dotel.resource.attributes=service.name=selenium-node-firefox\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-firefox:4.12.1-20230912\n</code></pre> <p>You can also refer to the below docker-compose yaml files to be able to start a simple grid (or) a dynamic grid.</p> <ul> <li>Simple Grid v3 yaml file</li> <li>Simple Grid v2 yaml file</li> <li>Dynamic Grid v3 yaml file</li> </ul> <p>You can view the Jaegar UI and trace your request.</p>"},{"location":"about/#troubleshooting","title":"Troubleshooting","text":"<p>All output gets sent to stdout, so it can be inspected by running: <pre><code>$ docker logs -f &lt;container-id|container-name&gt;\n</code></pre></p> <p>You can increase the log output by passing environment variable to the containers: <pre><code>SE_OPTS=\"--log-level FINE\"\n</code></pre></p>"},{"location":"about/#-shm-size2g","title":"<code>--shm-size=\"2g\"</code>","text":"<p>Why is <code>--shm-size 2g</code> necessary?</p> <p>This is a known workaround to avoid the browser crashing inside a docker container, here are the documented issues for Chrome and Firefox. The shm size of 2gb is arbitrary but known to work well, your specific use case might need a different value, it is recommended to tune this value according to your needs.</p>"},{"location":"about/#headless","title":"Headless","text":"<p>If you see the following selenium exceptions:</p> <p><code>Message: invalid argument: can't kill an exited process</code></p> <p>or</p> <p><code>Message: unknown error: Chrome failed to start: exited abnormally</code></p> <p>The reason might be that you've set the <code>START_XVFB</code> environment variable to \"false\", but forgot to  actually run Firefox, Chrome or Edge in headless mode.</p>"},{"location":"about/#mounting-volumes-to-retrieve-downloaded-files","title":"Mounting volumes to retrieve downloaded files","text":"<p>A common scenario is mounting a volume to the browser  container in order to retrieve downloaded files. This works well in Windows and macOS but not without  workarounds in Linux. For more details, check this well-documented issue.</p> <p>For example, while using Linux, you might be starting a container in the following way:</p> <pre><code>docker run -d -p 4444:4444 --shm-size=\"2g\" \\\n  -v /home/ubuntu/files:/home/seluser/files \\\n  selenium/standalone-chrome:4.12.1-20230912\n</code></pre> <p>That will mount the host <code>/home/ubuntu/files</code> directory to the <code>/home/seluser/files</code> inside the container. The problem happens because the volume will be mounted as <code>root</code>; therefore, the browser cannot write a file to that directory because it is running under the user  <code>seluser</code>. This happens because that is how Docker mounts volumes in Linux, more details in this issue.</p> <p>A workaround for this is to create a directory on the host and change its permissions before mounting the volume.  Depending on your user permissions, you might need to use  <code>sudo</code> for some of these commands:</p> <pre><code>mkdir /home/ubuntu/files\nchown 1200:1201 /home/ubuntu/files\n</code></pre> <p>After doing this, you should be able to download files to the mounted directory. If you have a better workaround, please send us a pull request! </p>"},{"location":"index2/","title":"What is MAT","text":""},{"location":"index2/#transformant-el-futur-del-desenvolupament-de-software","title":"Transformant el Futur del Desenvolupament de Software","text":"<p>El Marc d'Automatitzaci\u00f3 de Testing (MAT) \u00e9s la soluci\u00f3 integral del CTTI per optimitzar, estandarditzar i agilitzar el proc\u00e9s de proves. Amb eines avan\u00e7ades i metodologies modernes, el MAT garanteix la qualitat i fiabilitat del programari.</p> <p>Explora les Funcionalitats  Documentaci\u00f3 T\u00e8cnica </p>"},{"location":"index2/#funcionalitats-clau","title":"Funcionalitats Clau","text":"<ul> <li> <p> Automatitzaci\u00f3 Intel\u00b7ligent</p> <p>Proves automatitzades integrades en fluxos CI/CD.</p> </li> <li> <p> Monitoratge en Temps Real</p> <p>Visualitzaci\u00f3 de m\u00e8triques i resultats en temps real.</p> </li> </ul> <ul> <li> <p> Qualitat Garantida</p> <p>Validaci\u00f3 cont\u00ednua amb Quality Gates avan\u00e7ats.</p> </li> <li> <p> Integraci\u00f3 amb APIs</p> <p>Proves d'API amb Postman i OWASP ZAP.</p> </li> </ul>"},{"location":"index2/#ultimes-novetats","title":"\u00daltimes Novetats","text":"<ul> <li> <p> Llan\u00e7ament de la Versi\u00f3 1.0</p> <p>Descobreix les noves funcionalitats del MAT, incloent-hi suport per a proves distribu\u00efdes.</p> <p> Llegir m\u00e9s</p> </li> <li> <p> Integraci\u00f3 Completa amb Jenkins</p> <p>Automatitza les teves proves amb pipelines optimitzats.</p> <p> Llegir m\u00e9s</p> </li> </ul>"},{"location":"index2/#recursos-addicionals","title":"Recursos Addicionals","text":"<ul> <li> Documentaci\u00f3 Completa</li> <li> Tutorials en V\u00eddeo</li> <li> Repositori GitHub</li> </ul>"},{"location":"test/","title":"Overview","text":"<p>This is a very simple package containing two modules that implement vehicle and car classes. The documentation includes the API docstrings for the modules and a demo example in Jupyter notebook.</p>"},{"location":"test/#system-structure","title":"System structure","text":"<pre><code>%%{init: {'theme':'default'}}%%\nflowchart LR\nsubgraph Vehicle\nnum1[(num_of_wheels)]\nend\nsubgraph Car\nnum2[(num_of_wheels)]\nbrand[(brand)]\ndrive[drive]\n\nend\nCar --inherits--&gt; Vehicle</code></pre>"},{"location":"jenkins/jmeter/","title":"Explicaci\u00f3 del jenkinsfile","text":"<p>Aquest \u00e9s un fitxer Jenkinsfile que s'est\u00e0 utilitzant per executar tests de performance en Jenkins.</p> <pre><code>properties([ \n    parameters([ \n        string(name: 'REPO_URL', \n        defaultValue: 'http://gitea.gitea/devsecops/performance-test', \n        description: 'URL del repositori de codi font') \n    ]) \n]) \n</code></pre> <p>Aquesta secci\u00f3 defineix les propietats i els par\u00e0metres que es poden configurar per a la construcci\u00f3, com per exemple, la URL del repositori de codi font.</p> <p><pre><code>podTemplate(label: 'mypodjmeter', \n    containers: [ \n        containerTemplate( \n        name: \"jmeter\", \n        image: \"public.ecr.aws/t1l0g7t9/huge-worker:latest\", \n        command: \"cat\", \n        ttyEnabled: true \n        ) \n    ]) \n</code></pre> Definim un podTemplate amb una etiqueta 'mypodjmeter' que cont\u00e9 un contenidor 'jmeter' amb la imatge 'public.ecr.aws/t1l0g7t9/huge-worker:latest'.</p> <pre><code>node(\"mypodjmeter\") { \nIndica que els seg\u00fcents estadis s'executaran en el pod 'mypodjmeter'.\n\nstage(\"Checkout repo\") { \n    checkout([ $class: \"GitSCM\", \n    branches: [[name: \"*/master\"]], \n    doGenerateSubmoduleConfigurations: false, \n    extensions: [], \n    submoduleCfg: [], \n    userRemoteConfigs: [[url: \"${params.REPO_URL}\"]] \n    ]) \n}\n</code></pre> <p>L'estadi \"Checkout repo\" fa una verificaci\u00f3 del codi font dins del repositori de Git que correspon a l'URL proporcionada.</p> <pre><code>stage(\"JMeter run perf test\") { \n    container(\"jmeter\") { \n        sh(\"jmeter -n -t TestPlanCTTI.jmx -e -o html.d -l log.jtl -q user.properties\") \n    } \n}\n</code></pre> <p>En l'estadi \"JMeter run perf test\", s'executa un script shell que executa la prova de rendiment de JMeter.</p> <pre><code>stage(\"Publish report\") { \n    publishHTML([ \n    reportName: 'JMeterReport', \n    reportDir: 'html.d', \n    reportFiles: 'index.html', \n    keepAll: true, \n    allowMissing: false, \n    alwaysLinkToLastBuild: true, \n    useWrapperFileDirectly: true \n    ]) \n}\n</code></pre> <p>L'estadi \"Publish report\" publica l'informe generat a trav\u00e9s de la prova de rendiment de JMeter.</p> <p><pre><code>stage(\"Check perf thresholds\") { \n    perfReport compareBuildPrevious: true, \n    errorFailedThreshold: 80, \n    errorUnstableThreshold: 100, \n    filterRegex: \"\", \n    relativeFailedThresholdNegative: -10.0, \n    relativeFailedThresholdPositive: -10.0, \n    relativeUnstableThresholdNegative: -10.0, \n    relativeUnstableThresholdPositive: -10.0, \n    sourceDataFiles: \"log.jtl\" \n}\n</code></pre> Finalment, l'estadi \"Check perf thresholds\" comprova si el rendiment de la prova compleix els llindars establerts.</p>"},{"location":"jenkins/owasp/","title":"Explicaci\u00f3 del Jenkinsfile","text":"<p>Aquest \u00e9s un Jenkinsfile que utilitza OWASP ZAP per conduir un escaneig de seguretat en una aplicaci\u00f3 web.</p> <pre><code>properties([ \n    parameters([ \n        string ( name: 'WEB_URL', defaultValue: 'http://frontend.conference-app', description: 'URL de la web a scanear' ),\n        choice ( name: 'test_type', choices: [\"baseline\", \"full-scan\", \"api-scan\"], description: 'Level of testing to use.' ),\n        booleanParam ( name: 'w_error', defaultValue: false, description: 'Mark the checkbox to treat warnings as a error' ) \n    ]) \n]) \n</code></pre> <p>Aquesta secci\u00f3 defineix les propietats i par\u00e0metres que es poden configurar per a la construcci\u00f3, com l'URL de la web a escanejar, el nivell de proves a utilitzar i si volem tractar els advertiments com errors.</p> <pre><code>podTemplate(label: 'owaszap', \n    containers: [ \n        containerTemplate( \n            name: 'owaszap', \n            image: 'ghcr.io/zaproxy/zaproxy:stable', \n            command: 'cat', \n            ttyEnabled: true, \n            resources: [ \n                limits: [ memory: '2Gi', cpu: '2' ], \n                requests: [ memory: '2Gi', cpu: '2' ] \n            ] \n        ) \n    ]) \n</code></pre> <p>Aqu\u00e9st bloc defineix el template del pod \"owaszap\" que utilitzar\u00e0 la imatge de Docker \"zaproxy/zaproxy:stable\". Tamb\u00e9 estableix l\u00edmits i requests per a la mem\u00f2ria i el CPU.</p> <pre><code>node('owaszap') { \n    def error_level = \"-I\" \n    if (params.w_error){ \n        error_level = \"\" \n    } \n    def api_type = \"\" \n    if (params.test_type == \"api-scan\"){ \n        api_type = \"-f openapi\" \n    } \n</code></pre> <p>Estem fixant el nivell d'error i el tipus d'API segons els par\u00e0metres proporcionats.</p> <pre><code>stage('owaszap run') { \n    container('owaszap') { \n        sh(\"mkdir -p /zap/wrk &amp;&amp; sed -i 's/traditional-html/high-level-report/' /zap/zap-${params.test_type}.py &amp;&amp; zap-${params.test_type}.py -t ${params.WEB_URL} ${api_type} ${error_level} -r report.html &amp;&amp; mv /zap/wrk/* . \") \n    } \n} \n</code></pre> <p>En aquest estadi, el contenidor est\u00e0 executant-se, escanejant la aplicaci\u00f3 web amb OWASP ZAP.</p> <pre><code>stage(\"Publish report\") { \n    publishHTML([ \n        reportName: 'OwaszapReport', \n        reportDir: '.', \n        reportFiles: 'report.html', \n        keepAll: true, \n        allowMissing: false, \n        alwaysLinkToLastBuild: true, \n        useWrapperFileDirectly: true \n    ]) \n} \n</code></pre> <p>Finalment, l'estadi \"Publish report\" publica l'informe generat a trav\u00e9s del escaneig de seguretat OWASP ZAP.</p>"},{"location":"jenkins/postman/","title":"Explicaci\u00f3 del jenkinsfile","text":"<p>Aquest \u00e9s un fitxer Jenkinsfile que s'usa per conduir tests utilitzant Postman i Newman en Jenkins.</p> <p><pre><code>properties([ \n    parameters([ \n        string(name: 'REPO_URL', \n        defaultValue: 'http://gitea.gitea/devsecops/backend-test-java.git', \n        description: 'URL del repositori de codi font'), \n        string(name: 'APP_NAME', \n        defaultValue: 'template', \n        description: 'Nom de la aplicaci\u00f3') \n    ]) \n]) \n</code></pre> Aquesta secci\u00f3 defineix les propietats i els par\u00e0metres que es poden configurar per a la construcci\u00f3, com l'URL del repositori de codi font i el nom de l'aplicaci\u00f3.</p> <p><pre><code>podTemplate(label: 'mypodpostman', \n    containers: [ \n        containerTemplate( \n        name: \"postman\", \n        image: \"public.ecr.aws/t1l0g7t9/huge-worker:latest\", \n        command: \"cat\", \n        ttyEnabled: true \n        ) \n    ]) \n</code></pre> Definim un template de pod 'mypodpostman' que cont\u00e9 un contenidor 'postman' basat en la imatge 'public.ecr.aws/t1l0g7t9/huge-worker:latest'.</p> <pre><code>node(\"mypodpostman\") { \n    def build_status = 'SUCCESS' \n...\n}\n</code></pre> <p>Aquest bloc inclou el codi que s'executa en el node 'mypodpostman'. La variable 'build_status' s'inicialitza amb 'SUCCESS'.</p> <pre><code>stage(\"Checkout repo\") { \n    checkout([ $class: \"GitSCM\", \n    branches: [[name: \"*/main\"]], \n    doGenerateSubmoduleConfigurations: false, \n    extensions: [], \n    submoduleCfg: [], \n    userRemoteConfigs: [[url: \"${params.REPO_URL}\"]] \n    ]) \n}\n</code></pre> <p>En l'estadi \"Checkout repo\", es fa checkout del codi font del repositori de Git aconseguit amb la URL proporcionada.</p> <pre><code>try { \n    stage(\"Newman run\") { \n        container(\"postman\") { \n            sh(\"newman run ${params.APP_NAME}-backend-postman.json -e environment.json -r cli,htmlextra --reporter-htmlextra-export newman/report.html\") \n        } \n    } \n} catch (Exception e) { \n    echo \"Newman failed with error: ${e}\" \n    build_status = 'FAILURE' \n}\n</code></pre> <p>En cas de error durant l'execuci\u00f3 de Newman, el proc\u00e9s captura l'exception i marca l'estat de construcci\u00f3 com a \"FAILURE\".</p> <pre><code>stage(\"Publish report\") { \n    publishHTML([ \n    reportName: 'PostmanReport', \n    reportDir: 'newman', \n    reportFiles: 'report.html', \n    keepAll: true, \n    allowMissing: false, \n    alwaysLinkToLastBuild: true, \n    useWrapperFileDirectly: true \n    ]) \n}\n</code></pre> <p>L'estadi \"Publish report\" publica l'informe generat despr\u00e9s de l'execuci\u00f3 de Newman.</p> <pre><code>currentBuild.result = build_status \n</code></pre> <p>Finalment, assigna l'estat del proc\u00e9s de construcci\u00f3 a la variable \"build_status\".</p>"},{"location":"jenkins/selenium/","title":"Pipeline d'Integraci\u00f3 Cont\u00ednua MAT","text":""},{"location":"jenkins/selenium/#descripcio-general","title":"Descripci\u00f3 General","text":"<p>Aquest pipeline Jenkins automatitza l'execuci\u00f3 de proves funcionals integrat al Marc d'Automatitzaci\u00f3 de Testing (MAT) del CTTI.</p> <ul> <li> Integraci\u00f3 amb GitHub</li> <li> Sincronitzaci\u00f3 amb JIRA</li> <li> M\u00e8triques en temps real</li> <li> Quality Gates Integrats</li> </ul>"},{"location":"jenkins/selenium/#diagrama-del-flux","title":"Diagrama del Flux","text":"<pre><code>%%{init: {'theme':'neutral'}}%%\nsequenceDiagram\n    participant Jenkins\n    participant GitHub\n    participant Kubernetes\n    participant JIRA\n    participant InfluxDB\n\n    Jenkins-&gt;&gt;GitHub: Clona repositori\n    GitHub--&gt;&gt;Jenkins: Codi font\n    Jenkins-&gt;&gt;Kubernetes: Desplega Pod Maven\n    Kubernetes--&gt;&gt;Jenkins: Confirmaci\u00f3\n    Jenkins-&gt;&gt;Jenkins: Executa proves Selenium\n    Jenkins-&gt;&gt;JIRA: Puja resultats TestNG\n    Jenkins-&gt;&gt;InfluxDB: Emmagatzema m\u00e8triques\n    Jenkins-&gt;&gt;GitHub: Notifica PR</code></pre>"},{"location":"jenkins/selenium/#parametres-del-pipeline","title":"Par\u00e0metres del Pipeline","text":"Par\u00e0metre Descripci\u00f3 Valors Permesos <code>REPO_URL</code> Repositori de proves URL GitHub v\u00e0lida <code>ENV_TO_TEST</code> Entorn de proves Desenvolupament, Integraci\u00f3, Preproducci\u00f3, Producci\u00f3 <code>BRANCH</code> Branca a provar Nom de branca v\u00e0lid <code>QUALITY_GATE</code> Control de qualitat true/false"},{"location":"jenkins/selenium/#etapes-principals","title":"Etapes Principals","text":""},{"location":"jenkins/selenium/#1-pipeline","title":"1. Pipeline","text":"<pre><code>%%{init: {'theme':'neutral'}}%%\nflowchart TD\nA([Inici]) --&gt; B[Validaci\u00f3 Par\u00e0metres]\nB --&gt; C[Checkout Codi]\nC --&gt; D[Validar Issue JIRA]\nD --&gt; E[Executar Proves Maven]\nE --&gt; F[Pujar Resultats JIRA]\nF --&gt; G[Publicar Informe HTML]\nG --&gt; H[Pujar Informe JIRA]\nH --&gt; I{{QUALITY_GATE?}}\nI --&gt;|Activat| J[Avaluar Umbral]\nI --&gt;|Desactivat| K[Saltar Control]\nJ --&gt; L{Errors &lt; UMBRAL?}\nL --&gt;|S\u00ed| M[Notificar \u00c8xit]\nL --&gt;|No| N[Aturar Pipeline]\nK --&gt; M\nM --&gt; O[Adjuntar MD a GitHub PR]\nN --&gt; O\nO --&gt; P([Fi])\nclassDef stage fill:#4CAF50,stroke:#388E3C,color:white;\nclassDef decision fill:#FFC107,stroke:#FFA000;\nclassDef error fill:#F44336,stroke:#D32F2F,color:white;\nclass A,B,C,D,E,F,G,H,J stage\nclass I,L decision\nclass N error\n\n\n</code></pre>"},{"location":"jenkins/selenium/#2-execucio-de-proves","title":"2. Execuci\u00f3 de Proves","text":"Tecnologies Utilitzades <ul> <li>Selenium per a proves funcionals</li> <li>Maven com a gestor de depend\u00e8ncies</li> <li>Extent per a informes executives</li> </ul>"},{"location":"jenkins/selenium/#3-gestio-de-resultats","title":"3. Gesti\u00f3 de Resultats","text":"Eina Funci\u00f3 Integraci\u00f3 JIRA Pujada de resultats Xray Test Management GitHub Vinculaci\u00f3 a PRs Comentaris autom\u00e0tics InfluxDB Emmagatzematge m\u00e8triques Grafana Dashboards"},{"location":"jenkins/selenium/#4-gestio-de-derrors","title":"4. Gesti\u00f3 de d'Errors","text":"<pre><code>%%{init: {'theme':'neutral'}}%%\nstateDiagram-v2\n    [*] --&gt; Error\n    Error --&gt; Notificaci\u00f3\n    Notificaci\u00f3 --&gt; JIRA: Crea incid\u00e8ncia\n    Notificaci\u00f3 --&gt; Teams: Notifica equip\n    JIRA --&gt; [*]\n    Teams --&gt; [*]</code></pre>"},{"location":"jenkins/selenium/#5-flux-de-qualitat-quality-gate","title":"5.  Flux de Qualitat (Quality Gate)","text":"<pre><code>%%{init: {'theme':'neutral'}}%%\nflowchart LR\n    A[Resultats Proves] --&gt; B{QUALITY_GATE?}\n    B --&gt;|Activat| C[Verifica UMBRAL]\n    C --&gt; D&gt;20% errors permessos]\n    B --&gt;|Desactivat| E[Ignora errors]\n    D --&gt; F{\u00c8xit?}\n    F --&gt;|S\u00ed| G[Continua]\n    F --&gt;|No| H[Atura Pipeline]\n</code></pre>"},{"location":"jenkins/selenium/#6-diagrama-de-configuracio-del-entorn","title":"6. Diagrama de Configuraci\u00f3 del Entorn","text":"<pre><code>%%{init: {'theme':'neutral'}}%%\nflowchart LR\n    subgraph Kubernetes\n        A[Pod Template] --&gt; B[Contenidor Maven]\n        B --&gt; C[Persistent Volume]\n        C --&gt; D[.m2/repository]\n    end\n    subgraph Config\n        E[Par\u00e0metres] --&gt; F[REPO_URL]\n        E --&gt; G[ENV_TO_TEST]\n        E --&gt; H[BRANCH]\n    end\n    Kubernetes --&gt; Config\n</code></pre>"},{"location":"jenkins/selenium/#qualitat-i-seguretat","title":"Qualitat i Seguretat","text":"<p>Control d'Errors</p> <p>El pipeline inclou mecanismes avan\u00e7ats de gesti\u00f3 d'errors: - Validaci\u00f3 de tickets JIRA - Avaluaci\u00f3 de llindars d'error - Notificacions multi-canal</p> <pre><code>stateDiagram-v2\n[] --&gt; Error\nError --&gt; Notificaci\u00f3: Envia alerta\nNotificaci\u00f3 --&gt; JIRA: Crea incid\u00e8ncia\nNotificaci\u00f3 --&gt; Teams: Notifica equip\nJIRA --&gt; []\nTeams --&gt; [*]</code></pre>"},{"location":"jenkins/selenium/#integracio-amb-ecosistema-mat","title":"Integraci\u00f3 amb Ecosistema MAT","text":"<ul> <li>Documentaci\u00f3 T\u00e8cnica</li> <li>Exemples d'Implementaci\u00f3</li> <li>Guia de Troubleshooting</li> </ul>"},{"location":"mat/","title":"Features","text":"<ul> <li> <p> Plataforma Integral</p> <p>Optimitzem, estandarditzem i agilitzem el proc\u00e9s de proves de programari.</p> </li> <li> <p> Metodologia Avan\u00e7ada</p> <p>Implementem bones pr\u00e0ctiques i processos automatitzats de testing.</p> </li> <li> <p> Transformaci\u00f3 Digital</p> <p>Impulsem la millora cont\u00ednua en el lliurament de solucions tecnol\u00f2giques.</p> </li> </ul>"},{"location":"mat/#descripcio-del-mat","title":"Descripci\u00f3 del MAT","text":"<p>Definici\u00f3 Estrat\u00e8gica</p> <p>El MARC D'AUTOMATITZACI\u00d3 DE TESTING (MAT) ha estat desenvolupat per l'\u00c0rea de Qualitat del CTTI com una plataforma integral dissenyada per optimitzar, estandarditzar i agilitzar el proc\u00e9s de proves de programari.</p>"},{"location":"mat/#caracteristiques-principals","title":"Caracter\u00edstiques Principals","text":"Enfocament Estructurat <p>El MAT no \u00e9s nom\u00e9s un conjunt d'eines, sin\u00f3 un enfocament estructurat que inclou:</p> <ul> <li>Metodologies avan\u00e7ades</li> <li>Bones pr\u00e0ctiques de testing</li> <li>Processos automatitzats</li> <li>Reducci\u00f3 de riscos</li> <li>Minimitzaci\u00f3 del temps de validaci\u00f3</li> </ul>"},{"location":"mat/#arquitectura-modular","title":"Arquitectura Modular","text":"<ul> <li> <p> Modularitat</p> <p>Estructura escalable i adaptable a diversos projectes</p> </li> <li> <p> Eines Avan\u00e7ades</p> <p>Execuci\u00f3, seguiment i an\u00e0lisi de proves automatitzades</p> </li> <li> <p> Integraci\u00f3 CI/CD</p> <p>Guies i processos per a fluxos de treball moderns</p> </li> </ul>"},{"location":"mat/#continuous-testing-ct","title":"Continuous Testing (CT)","text":"<p>Execuci\u00f3 Cont\u00ednua</p> <p>El CT \u00e9s una pr\u00e0ctica fonamental que consisteix en:</p> <ul> <li>Proves automatitzades durant tot el cicle de vida</li> <li>Validaci\u00f3 immediata de cada canvi de codi</li> <li>Detecci\u00f3 primerenca d'errors</li> </ul>"},{"location":"mat/#beneficis-estrategics","title":"Beneficis Estrat\u00e8gics","text":"Impacte del MAT <ul> <li> Millora de l'efici\u00e8ncia</li> <li> Reducci\u00f3 del temps de lliurament</li> <li> Manteniment d'alt nivell de qualitat</li> <li> Detecci\u00f3 r\u00e0pida de regressions</li> <li> Reducci\u00f3 de costos de correcci\u00f3</li> </ul>"},{"location":"mat/#integracio-amb-eines-ctti","title":"Integraci\u00f3 amb Eines CTTI","text":"Eina Funci\u00f3 Descripci\u00f3  Sonarqube An\u00e0lisi Est\u00e0tic Avaluaci\u00f3 de qualitat de codi  Selenium Proves Funcionals Automatitzaci\u00f3 de test funcionals  Jira Gesti\u00f3 de Proves Seguiment i gesti\u00f3 de casos de test  JMeter Proves de Rendiment Avaluaci\u00f3 del rendiment sota c\u00e0rrega  Postman Proves d'API Validaci\u00f3 i automatitzaci\u00f3 d'APIs  OWASP ZAP Proves de Seguretat Detecci\u00f3 de vulnerabilitats en aplicacions web <p>Transformaci\u00f3 Digital</p> <p>El MAT impulsa la millora cont\u00ednua, facilitant el lliurament de solucions tecnol\u00f2giques robustes i fiables.</p> <p>Explora el Continuous Deployment </p>"},{"location":"mat/pipeline/","title":"Continuous Deployment i Testing Preproducci\u00f3 - Microserveis","text":""},{"location":"mat/pipeline/#fases-del-proces","title":"Fases del Proc\u00e9s","text":"<p>Proc\u00e9s Automatitzat</p> <p>El proc\u00e9s de Continuous Deployment est\u00e0 completament automatitzat, assegurant una entrega r\u00e0pida i consistent!</p> <p> </p> Diagrama del proc\u00e9s de Continuous Deployment"},{"location":"mat/pipeline/#1-inici-del-desplegament-cd","title":"1. Inici del Desplegament (CD)","text":"<p>Punt d'entrada del proc\u00e9s de desplegament continu. S'inicia autom\u00e0ticament quan es detecten canvis al repositori.</p>"},{"location":"mat/pipeline/#2-verificacio-dartefactes","title":"2. Verificaci\u00f3 d'Artefactes","text":"<p>Comprovaci\u00f3 dels components necessaris pel desplegament, assegurant que tots els artefactes estiguin disponibles i siguin v\u00e0lids.</p>"},{"location":"mat/pipeline/#3-configuracio-de-lentorn","title":"3. Configuraci\u00f3 de l'Entorn","text":"<p>Preparaci\u00f3 de la matriu d'entorns necess\u00e0ria pel desplegament, configurant les variables i depend\u00e8ncies espec\u00edfiques.</p>"},{"location":"mat/pipeline/#4-auditoria-previa","title":"4. Auditoria Pr\u00e8via","text":"<p>Avaluaci\u00f3 de seguretat i compliment normatiu abans del desplegament per identificar possibles riscos.</p>"},{"location":"mat/pipeline/#5-desplegament","title":"5. Desplegament","text":"<p>Execuci\u00f3 del proc\u00e9s de desplegament dels microserveis a l'entorn corresponent.</p>"},{"location":"mat/pipeline/#6-verificacio-de-salut","title":"6. Verificaci\u00f3 de Salut","text":"<p>Comprovaci\u00f3 de l'estat dels serveis despr\u00e9s del desplegament, verificant la seva disponibilitat i funcionament correcte.</p>"},{"location":"mat/pipeline/#7-testing-automatitzat-mat","title":"7. Testing Automatitzat (MAT)","text":"<p>Execuci\u00f3 de les proves automatitzades utilitzant el Marc d'Automatitzaci\u00f3 de Testing:</p> Tipus de Prova Descripci\u00f3 Proves d'API Validaci\u00f3 dels endpoints i integracions Proves Funcionals Verificaci\u00f3 del comportament esperat Proves de Rendiment Avaluaci\u00f3 del rendiment sota c\u00e0rrega"},{"location":"mat/pipeline/#8-auditoria-posterior","title":"8. Auditoria Posterior","text":"<p>Verificaci\u00f3 final de seguretat i qualitat despr\u00e9s del desplegament i les proves.</p>"},{"location":"mat/pipeline/#9-comunicacio","title":"9. Comunicaci\u00f3","text":"<p>Notificaci\u00f3 autom\u00e0tica dels resultats del desplegament i les proves als interessats via correu electr\u00f2nic.</p>"},{"location":"mat/pipeline/#10-gestio-dincidencies-itsm-remedy","title":"10. Gesti\u00f3 d'Incid\u00e8ncies (ITSM - REMEDY)","text":"<p>Sistema integrat de gesti\u00f3 d'incid\u00e8ncies que s'activa autom\u00e0ticament en cas de detectar problemes durant qualsevol fase del proc\u00e9s.</p>"},{"location":"mat/pipeline/#parametres-dentrada-de-la-pipeline","title":"Par\u00e0metres d'Entrada de la Pipeline","text":"<p>Els seg\u00fcents par\u00e0metres s\u2019utilitzen per configurar l'execuci\u00f3 de la pipeline i s\u2019obtenen del Jenkinsfile:</p>"},{"location":"mat/pipeline/#mat-proves-funcional","title":"MAT-PROVES-FUNCIONAL","text":"Par\u00e0metre Valor per defecte Descripci\u00f3 <code>FUNC_REPO_URL</code> <code>https://github.com/ctti-dev/3632.00-mat-functional-tests</code> URL del repositori de proves funcionals <code>FUNC_BRANCH</code> <code>master</code> Rama del repositori de proves funcionals <code>FUNC_ENV_TO_TEST</code> <code>Produccio</code> Entorn per executar les proves funcionals <code>FUNC_URL_APP</code> <code>https://qualitat.solucions.gencat.cat</code> URL de l'aplicaci\u00f3 objectiu de les proves funcionals <code>FUNC_UMBRAL</code> <code>20</code> Umbral de fallades per a les proves funcionals <code>FUNC_QUALITY_GATE</code> <code>false</code> Activar/desactivar el Quality Gate per les proves funcionals <code>FUNC_JIRA_PROJECT_KEY</code> (Cadena buida) Clau del projecte Jira associat a les proves funcionals <code>FUNC_JIRA_ISSUE_KEY</code> (Cadena buida) Clau de la incidencia Jira (Test Plan) per a les proves funcionals"},{"location":"mat/pipeline/#mat-proves-rendiment","title":"MAT-PROVES-RENDIMENT","text":"Par\u00e0metre Valor per defecte Descripci\u00f3 <code>PERF_REPO_URL</code> <code>https://github.com/ctti-dev/3632.00-mat-performance-tests</code> URL del repositori de proves de rendiment <code>PERF_BRANCH</code> <code>master</code> Rama del repositori de proves de rendiment <code>PERF_PROTOCOL</code> <code>https</code> Protocol de connexi\u00f3 per a les proves de rendiment <code>PERF_URL_APP</code> <code>qualitat.solucions.gencat.cat</code> URL de l'aplicaci\u00f3 objectiu per a proves de rendiment <code>PERF_ENV_TO_TEST</code> <code>Produccio</code> Entorn per executar les proves de rendiment <code>PERF_TEST_DURATION</code> <code>10</code> Durada de les proves de rendiment (en minuts) <code>PERF_RAMP_UP_TIME</code> <code>60</code> Temps de rampa per a augment gradual de c\u00e0rrega <code>PERF_THREAD_COUNT</code> <code>20</code> Nombre de fils (hilos) a simular en la prova de rendiment <code>PERF_QUALITY_GATE</code> <code>false</code> Activar/desactivar el Quality Gate per a proves de rendiment <code>PERF_UMBRAL</code> <code>20</code> Umbral de fallades per a les proves de rendiment <code>PERF_JIRA_PROJECT_KEY</code> (Cadena buida) Clau del projecte Jira per a proves de rendiment <code>PERF_JIRA_ISSUE_KEY</code> (Cadena buida) Clau de la incid\u00e8ncia Jira per al Test Plan de proves de rendiment"},{"location":"mat/pipeline/#mat-proves-api","title":"MAT-PROVES-API","text":"Par\u00e0metre Valor per defecte Descripci\u00f3 <code>API_REPO_URL</code> <code>https://github.com/ctti-dev/3632.00-mat-api-tests.git</code> URL del repositori de codi font per a proves d'API <code>API_BRANCH</code> <code>master</code> Rama del repositori de proves d'API <code>API_APP_NAME</code> <code>conference</code> Nom de l'aplicaci\u00f3 objectiu per a les proves d'API <code>API_ENV_TO_TEST</code> (Utilitza opcions: Desenvolupament, Integracio, Preproduccio, Produccio) Entorns disponibles per a provar l'API <code>API_JIRA_PROJECT_KEY</code> <code>DEVSECOPS2</code> Clau del projecte Jira per a les proves d'API <code>API_JIRA_ISSUE_KEY</code> <code>DEVSECOPS2-251</code> Clau de la incid\u00e8ncia Jira (Test Plan) per a les proves d'API <p>Millora Cont\u00ednua</p> <p>El proc\u00e9s de CD est\u00e0 en constant evoluci\u00f3. Si tens suggeriments de millora, no dubtis en compartir-los!</p> <ul> <li> Monitoratge en Temps Real</li> <li> Control de Versions</li> </ul> <ul> <li> Automatitzaci\u00f3 Intel\u00b7ligent</li> <li> Seguretat Integrada</li> </ul>"},{"location":"tests/jmeter/","title":"JMeter","text":"<p>Github: https://github.com/apache/jmeter/tree/master</p> <p>Una aplicaci\u00f3 Java de Codi Obert dissenyada per mesurar el rendiment i fer proves de c\u00e0rrega d'aplicacions.</p> <p>Per The Apache Software Foundation</p> <p> </p>"},{"location":"tests/jmeter/#que-es","title":"Qu\u00e8 \u00e9s?","text":"<p>Apache JMeter pot mesurar el rendiment i fer proves de c\u00e0rrega d'aplicacions web est\u00e0tiques i din\u00e0miques.</p> <p>Pot ser utilitzat per simular una c\u00e0rrega pesada en un servidor, grup de servidors, xarxa o objecte per provar la seva resist\u00e8ncia o per analitzar el rendiment en general sota diferents tipus de c\u00e0rrega.</p> <p></p>"},{"location":"tests/jmeter/#caracteristiques","title":"Caracter\u00edstiques","text":"<p>Completa portabilitat i 100% Java.</p> <p>Multiproc\u00e9s que permet mostrejar concurrent per molts fils i mostreig simultani de diferents funcions per grups de fils separats.</p>"},{"location":"tests/jmeter/#protocols","title":"Protocols","text":"<p>Capacitat per carregar i fer proves de rendiment en moltes aplicacions/server/tipus de protocols:</p> <ul> <li>Web - HTTP, HTTPS (Java, NodeJS, PHP, ASP.NET,...)</li> <li>Serveis Web SOAP / REST</li> <li>FTP</li> <li>Base de dades a trav\u00e9s de JDBC</li> <li>LDAP</li> <li>Middleware orientat a missatges (MOM) a trav\u00e9s de JMS</li> <li>Correu - SMTP(S), POP3(S) i IMAP(S)</li> <li>Comandes natives o scripts de shell</li> <li>TCP</li> <li>Objectes Java</li> </ul>"},{"location":"tests/jmeter/#ide","title":"IDE","text":"<p>IDE de Proves completament funcional que permet una gravaci\u00f3 r\u00e0pida de Pla de Proves (des de Navegadors o aplicacions natives), construcci\u00f3 i depuraci\u00f3.</p>"},{"location":"tests/jmeter/#linia-de-comandes","title":"L\u00ednia de comandes","text":"<p>Mode de l\u00ednia de comandes (Mode no gr\u00e0fic / mode headless) per fer proves de c\u00e0rrega des de qualsevol OS compatible amb Java (Linux, Windows, Mac OSX, ...)</p>"},{"location":"tests/jmeter/#informes","title":"Informes","text":"<p>Un complet i a punt per presentar informe HTML din\u00e0mic</p> <p>Informes en temps real en bases de dades de tercers com InfluxDB o Graphite</p>"},{"location":"tests/jmeter/#correlacio","title":"Correlaci\u00f3","text":"<p>F\u00e0cil correlaci\u00f3 a trav\u00e9s de la capacitat per extreure dades dels formats de resposta m\u00e9s populars, HTML, JSON, XML o qualsevol format textual</p>"},{"location":"tests/jmeter/#nucle-altament-extensible","title":"Nucle altament extensible","text":"<ul> <li>Els Moldejadors enfichables permeten capacitats de prova il\u00b7limitades.</li> <li>Moldejadors Scriptables (llenguatges compatibles JSR223 com Groovy).</li> <li>Diverses estad\u00edstiques de c\u00e0rrega es poden triar amb tiers enfichables.</li> <li>Els plugins d'an\u00e0lisi de dades i visualitzaci\u00f3 permeten una gran extensibilitat i personalitzaci\u00f3.</li> <li>Les funcions es poden utilitzar per proporcionar entrada din\u00e0mica a una prova o proporcionar manipulaci\u00f3 de dades.</li> <li>F\u00e0cil Integraci\u00f3 Cont\u00ednua mitjan\u00e7ant llibreries d'Open Source de tercers per a Maven, Gradle i Jenkins.</li> </ul>"},{"location":"tests/jmeter/#la-ultima-versio","title":"La \u00faltima versi\u00f3","text":"<p>Els detalls de l'\u00faltima versi\u00f3 es poden trobar a la p\u00e0gina web del projecte Apache JMeter</p>"},{"location":"tests/jmeter/#requisits","title":"Requisits","text":"<p>Els seg\u00fcents requisits s\u00f3n necessaris per a l'execuci\u00f3 d'Apache JMeter:</p> <ul> <li>Int\u00e8rpret de Java:</li> </ul> <p>Es requereix un entorn d'execuci\u00f3 de Java 8 completament compatible   per a l'execuci\u00f3 d'Apache JMeter. Un JDK amb l'eina <code>keytool</code> \u00e9s m\u00e9s adequat   per a la gravaci\u00f3 de llocs web HTTPS.</p> <ul> <li>Jars opcionals:</li> </ul> <p>Alguns jars no s'inclouen amb JMeter.   Si es requereix, aquests s'han de descarregar i col\u00b7locar al directori lib   - JDBC - disponible des del prove\u00efdor de la base de dades   - JMS - disponible des del prove\u00efdor de JMS   - Bouncy Castle -   nom\u00e9s \u00e9s necessari per a SMIME Assertion</p> <ul> <li>Compilador de Java (OPCIONAL):</li> </ul> <p>No es necessita un compilador de Java ja que la distribuci\u00f3 inclou un   arxiu binari de Java precompilat.</p> <p>Nota que es requereix un compilador per construir plugins per a Apache JMeter.</p>"},{"location":"tests/jmeter/#instruccions-dinstallacio","title":"Instruccions d'instal\u00b7laci\u00f3","text":"<p>Nota que els espais en els noms de directors poden causar problemes.</p> <ul> <li>Construccions de llan\u00e7ament</li> </ul> <p>Desempaquetar l'arxiu binari en una estructura de directoris adequada.</p>"},{"location":"tests/jmeter/#diseno-del-proyecto","title":"Dise\u00f1o del proyecto","text":"<pre><code>performance-test\n\u2502   TestPlanCTTI.jmx            -&gt; Arxiu JMX amb la configuraci\u00f3 del test de rendiment\n\u2502   user.properties             -&gt; Arxiu de propietats\n\u2502\n\u2514\u2500\u2500\u2500.devcontainer               -&gt; Definici\u00f3 del contenidor IDE VSCode\n    \u2502   devcontainer.json\n</code></pre>"},{"location":"tests/jmeter/#clonar-repositori","title":"Clonar repositori","text":"<p><pre><code>git clone https://git.intranet.gencat.cat/devsecopsctti/3632-devsecopsctti-performance-test.git\n</code></pre> Si utilitza VS Code &amp; Docker el projecte es pot executar dins d'un contenidor</p>"},{"location":"tests/jmeter/#configurar-variables","title":"Configurar variables","text":"<ol> <li>Obri l'arxiu user.properties </li> <li> <p>Canvia els valors segons sigui necessari</p> </li> <li> <p><code>threadCount</code> \u00e9s el nombre d'usuaris</p> </li> <li><code>rampup</code> \u00e9s el temps de calentament</li> <li><code>testDuration</code> \u00e9s la durada del test</li> <li><code>url</code> \u00e9s l'URL de l'aplicaci\u00f3</li> <li><code>protocol</code> \u00e9s el protocol</li> </ol>"},{"location":"tests/jmeter/#com-executar-jmeter","title":"Com executar JMeter","text":"<ol> <li>Canvia al directori <code>bin</code> o estableix PATH amb la carpeta bin de jmeter</li> <li>Crear carpeta on es guadar\u00e1n els informes HTML p.e <code>HTMLReports</code></li> <li>Executa el fitxer <code>jmeter</code> (Unix) <pre><code>jmeter  -n -t TestPlanCTTI.jmx  -e -o HTMLReports -l log.jtl -q user.properties\n</code></pre></li> <li>o el fitxer <code>jmeter</code>(Windows) <pre><code>jmeter.bat  -n -t TestPlanCTTI.jmx  -e -o HTMLReports -l log.jtl -q user.properties\n</code></pre></li> </ol>"},{"location":"tests/jmeter/#informacio-per-a-desenvolupadors","title":"Informaci\u00f3 per a desenvolupadors","text":"<p>La construcci\u00f3 i contribuci\u00f3 s'explica en detall a construir JMeter i CONTRIBUTING.md. Hi ha m\u00e9s informaci\u00f3 disponible sobre les tasques disponibles per construir JMeter amb Gradle a gradle.md.</p> <p>Es pot obtenir el codi des de:</p> <ul> <li>https://github.com/apache/jmeter</li> <li>https://gitbox.apache.org/repos/asf/jmeter.git</li> </ul>"},{"location":"tests/jmeter/#llicencia-i-informacio-legal","title":"Llic\u00e8ncia i Informaci\u00f3 Legal","text":"<p>Per a informaci\u00f3 legal i de llic\u00e8ncia, si us plau, consulteu els seg\u00fcents fitxers:</p> <ul> <li>LICENSE</li> <li>NOTICE</li> </ul>"},{"location":"tests/postman/","title":"How to create Postman API acceptance tests","text":"<p>Writing API acceptance tests is a great way to write system tests while hitting real environments. These tests can be run on your local machine as well as in Vapor Cloud (please consider what environments you're using and why). If it's your first time looking into testing with Postman, then consider reading through some of these resources:</p> <ul> <li>Writing tests in Postman</li> <li>API testing tips from a Postman professional</li> <li>JSON Schema</li> <li>Tiny Validator (for v4 JSON Schema)</li> </ul>"},{"location":"tests/postman/#creating-a-test-collection","title":"Creating a test collection","text":"<p>To keep things separate, the tests for your API collection should be created in a different collection. If your API collection is named <code>my-project</code> then the corresponding test collection should be named <code>my-project-tests</code>. Remember to share this collection the same way you would share a normal API collection.</p> <p>Inside your test collection you will have endpoints for the endpoints you want to test. The order in which you arrange your folders and endpoints (from top to bottom) is important since this will be the order in which the Postman Runner will run your tests. Postman Runner is a tool for running all of your tests in a collection.</p> <p>As with your normal API collection, top level folders should follow the domains of your project:</p> <ul> <li>Posts</li> <li>Authors</li> <li>Categories</li> </ul> <p>Depending on the complexity of your project, you might want to create folders inside of these top level folders to describe flows.</p> <p>Expanding the Posts folder might then reveal the following endpoints in an arranged order:</p> <ul> <li>Get all posts</li> <li>Add post</li> <li>Get single post</li> <li>Get all posts</li> <li>Delete post</li> <li>Get single post</li> </ul>"},{"location":"tests/postman/#getting-started","title":"Getting Started","text":"<ol> <li>Install <code>newman</code></li> <li>Install <code>newman-reporter-influxdb</code></li> <li>Install InfluxDB (Get the server address, port, database name, etc)</li> </ol>"},{"location":"tests/postman/#prerequisites","title":"Prerequisites","text":"<ol> <li><code>node</code> and <code>npm</code></li> <li><code>newman</code> - <code>npm install -g newman</code></li> <li>InfluxDB</li> </ol>"},{"location":"tests/postman/#installation","title":"Installation","text":"<pre><code>npm install -g newman-reporter-influxdb\n</code></pre> <p>Installation should be done globally if newman is installed globally, otherwise install without <code>-g</code> option</p>"},{"location":"tests/postman/#usage","title":"Usage","text":"<p>Specify <code>-r influxdb</code> option while running the collection</p> <pre><code>newman run &lt;collection-url&gt; -r influxdb \\\n  --reporter-influxdb-server &lt;server-ip&gt; \\\n  --reporter-influxdb-port &lt;server-port&gt; \\\n  --reporter-influxdb-name &lt;database-name&gt; \\\n  --reporter-influxdb-measurement &lt;measurement-name&gt;\n</code></pre> <ul> <li>By default, reporter consider influxdb version 1.x (i.e 1.7, 1.8)</li> <li>In case of InfluxDB version 2, specify version, org and bucket name as well</li> <li><code>--reporter-influxdb-version 2</code></li> <li><code>--reporter-influxdb-org &lt;org-name&gt;</code></li> <li><code>--reporter-influxdb-name &lt;bucket-name&gt;</code></li> </ul> <p>Example:</p> <p>```</p>"},{"location":"tests/selenium/","title":"Automatitzaci\u00f3 de Proves amb Selenium","text":"<ul> <li> <p> Multiplataforma</p> <p>Compatibilitat amb Chrome, Firefox, Edge i Safari</p> </li> <li> <p> Patr\u00f3 Page Object</p> <p>Estructura modular i reutilitzable per a manteniment f\u00e0cil</p> </li> <li> <p> Integraci\u00f3 CI/CD</p> <p>Execuci\u00f3 autom\u00e0tica mitjan\u00e7ant Jenkins i Extent Reports</p> </li> </ul>"},{"location":"tests/selenium/#eina-clau-per-a-qualitat-web","title":"Eina Clau per a Qualitat Web","text":"<p>El MAT integra Selenium com a pe\u00e7a fonamental per garantir el funcionament correcte de les aplicacions web mitjan\u00e7ant proves funcionals automatitzades.</p> <p>Veure Pipeline  Documentaci\u00f3 T\u00e8cnica</p>"},{"location":"tests/selenium/#workflow","title":"Flux de Treball al MAT","text":"<pre><code>%%{init: {'theme':'neutral'}}%%\nflowchart TD\nA([Inici Pipeline]) --&gt; B[Jenkins inicia execuci\u00f3]\nB --&gt; C[Configura entorn Kubernetes]\nC --&gt; D[Executa suite de proves]\nD --&gt; E{{Resultats}}\nE --&gt;|\u00c8xit| F[Desplegament a Preproducci\u00f3]\nE --&gt;|Error| G[Notificaci\u00f3 a Slack]\nF --&gt; H([Fi Proc\u00e9s])\nG --&gt; H</code></pre>"},{"location":"tests/selenium/#configuracio","title":"Configuraci\u00f3","text":"Requisits Previs <ol> <li>Instal\u00b7lar WebDrivers espec\u00edfics</li> <li>Configurar nodes Selenium Grid</li> <li>Integrar amb repositori Git del projecte</li> </ol> <pre><code>class LoginPage:\ndef init(self, driver):\nself.driver = driver\nself.username = (By.ID, \"username\")\nself.password = (By.ID, \"password\")\ndef login(self, user, passw):\n    self.driver.find_element(*self.username).send_keys(user)\n    self.driver.find_element(*self.password).send_keys(passw)\n    self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n</code></pre>"},{"location":"tests/selenium/#execucio-de-proves","title":"Execuci\u00f3 de Proves","text":"<p>Millors Pr\u00e0ctiques</p> <ul> <li>\u00das de waits explicites</li> <li>Proves independents i a\u00efllades</li> <li>Captura d'evid\u00e8ncies en fallades</li> </ul>"},{"location":"tests/selenium/#flux-dexecucio","title":"Flux d'Execuci\u00f3","text":"<ol> <li>Inicialitzaci\u00f3  Configuraci\u00f3 de contenidors Kubernetes</li> <li>Execuci\u00f3  Tests en paral\u00b7lel amb Grid</li> <li>Validaci\u00f3  Assertions m\u00faltiples per cas</li> <li>Report  Generaci\u00f3 d'informes Extent</li> </ol>"},{"location":"tests/selenium/#metriques-clau","title":"M\u00e8triques Clau","text":"Indicador Descripci\u00f3 Objectiu  Temps Execuci\u00f3 Durada total de les proves &lt; 15 min  Taxes d'Error Proves fallides/totals 0% :material-coverage: Cobertura % funcionalitats provades &gt; 90% <ul> <li>Veure Exemples Complets</li> <li>Configurar Jenkins</li> </ul>"},{"location":"usage/functional/","title":"Prove\u00efdors i Configuraci\u00f3 del MAT","text":"<p>Aquest document descriu els requeriments, procediments d\u2019instal\u00b7laci\u00f3 i \u00fas del MAT (Marc d'Automatitzaci\u00f3 de Testing) utilitzant Docker Compose i la configuraci\u00f3 \"Standalone\", aix\u00ed com les instruccions per a la creaci\u00f3 i execuci\u00f3 de proves i la integraci\u00f3 amb Jira.</p>"},{"location":"usage/functional/#proveidors-i-requisits","title":"Prove\u00efdors i Requisits","text":""},{"location":"usage/functional/#proveidors","title":"Prove\u00efdors","text":"<ul> <li>Local</li> </ul>"},{"location":"usage/functional/#requisits-basics","title":"Requisits B\u00e0sics","text":"<ul> <li> <p>Instal\u00b7lar Docker:   Recomanat Docker Desktop: The #1 Containerization Tool for Developers.</p> </li> <li> <p>Instal\u00b7lar JDK: Download the Latest Java LTS Free.</p> </li> </ul>"},{"location":"usage/functional/#installacio-amb-docker-compose-recomanat","title":"Instal\u00b7laci\u00f3 amb Docker Compose (Recomanat)","text":""},{"location":"usage/functional/#instruccions-per-aixecar-la-infraestructura","title":"Instruccions per aixecar la infraestructura","text":"<p>Crea un fitxer anomenat <code>docker-compose.yaml</code> al directori del projecte amb el seg\u00fcent contingut: <pre><code>version: \"3\"\nservices:\nselenium-hub:\nimage: selenium/hub\ncontainer_name: selenium-hub\nports:\n- \"4442:4442\"\n- \"4443:4443\"\n- \"4444:4444\"\nchrome:\nimage: selenium/node-chrome\nshm_size: 2gb\ndepends_on:\n- selenium-hub\nenvironment:\n- SE_EVENT_BUS_HOST=selenium-hub\n- SE_EVENT_BUS_PUBLISH_PORT=4442\n- SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n- SE_NODE_MAX_INSTANCES=1\n- SE_NODE_MAX_SESSIONS=1\nedge:\nimage: selenium/node-edge\nshm_size: 2gb\ndepends_on:\n- selenium-hub\nenvironment:\n- SE_EVENT_BUS_HOST=selenium-hub\n- SE_EVENT_BUS_PUBLISH_PORT=4442\n- SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n- SE_NODE_MAX_INSTANCES=1\n- SE_NODE_MAX_SESSIONS=1\nfirefox:\nimage: selenium/node-firefox\nshm_size: 2gb\ndepends_on:\n- selenium-hub\nenvironment:\n- SE_EVENT_BUS_HOST=selenium-hub\n- SE_EVENT_BUS_PUBLISH_PORT=4442\n- SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n- SE_NODE_MAX_INSTANCES=1\n- SE_NODE_MAX_SESSIONS=1\n</code></pre></p>"},{"location":"usage/functional/#com-aixecar-el-servei","title":"Com aixecar el servei","text":"<ul> <li>Executar el seg\u00fcent comandament per iniciar tota l'arquitectura amb Docker Compose:</li> </ul> <pre><code>docker-compose -f docker-compose.yaml up -d --scale chrome=3 --scale firefox=3 --scale edge=1\n</code></pre> <p>Els nombres indicats per cada navegador representen el nombre de nodes (contenidors) per a cada navegador.</p> <ul> <li>Per comprovar els contenidors aixecats:</li> </ul> <pre><code>docker container ls\n</code></pre> <ul> <li> <p>Accedir a la WebUI de Selenium Grid: http://localhost:4444/ui</p> </li> <li> <p>Per eliminar els serveis aixecats:</p> </li> </ul> <pre><code>docker-compose -f docker-compose.yaml down\n</code></pre>"},{"location":"usage/functional/#cas-dus-sense-docker-configuracio-en-maquina-standalone","title":"Cas d'\u00das Sense Docker \u2013 Configuraci\u00f3 en M\u00e0quina \"Standalone\"","text":"<p>Si prefereixes executar Selenium sense Docker, segueix aquests passos:</p> <ol> <li> <p>Baixa Selenium Server (Grid)    Ves a la secci\u00f3 Downloads de Selenium i obt\u00e9 la versi\u00f3 compatible amb Chrome, Firefox i Edge.</p> </li> <li> <p>Baixa els Controladors Web </p> </li> <li>Chrome WebDriver: ChromeDriver </li> <li>Firefox WebDriver: Geckodriver Releases </li> <li> <p>Edge WebDriver: Microsoft Edge WebDriver</p> </li> <li> <p>Execuci\u00f3 en Mode Standalone</p> </li> </ol> <p>Despr\u00e9s d'obtindre el fitxer <code>selenium-server-&lt;version&gt;.jar</code>, obre un terminal, situa't al directori on es troba el JAR i executa:</p> <pre><code>java -jar selenium-server-4.10.0.jar standalone\n</code></pre> <p>Un cop en marxa, connecta amb la URL: http://localhost:4444/ui</p>"},{"location":"usage/functional/#creacio-i-execucio-de-proves","title":"Creaci\u00f3 i Execuci\u00f3 de Proves","text":""},{"location":"usage/functional/#requisits-per-a-les-proves","title":"Requisits per a les Proves","text":"<p>Assegura\u2019t de tenir configurats Java i Maven al teu sistema. Pots comprovar-ho amb:</p> <pre><code>java -version\nmvn -v\n</code></pre>"},{"location":"usage/functional/#pas-a-pas","title":"Pas a Pas","text":"<ol> <li> <p>Desc\u00e0rrega la plantilla de proves funcionals:</p> </li> <li> <p>Accedeix al repositori de la \u3010Plantilla de proves funcionals\u3011(enlla\u00e7 al repositori).</p> </li> <li> <p>Configuraci\u00f3 de l'entorn:</p> </li> </ol> <p>Editeu el fitxer de propietats, per exemple, <code>functional-test/config.properties</code>, afegint:</p> <pre><code>app = ...\nmaintainer = ...\napp_url = ...\nambit = ...\ntext\n</code></pre> <ol> <li>Creaci\u00f3 de les proves:</li> </ol> <p>Crea les proves en el fitxer <code>functional-test/src/test/java/&lt;file_name&gt;.java</code>.</p> <ol> <li>Execuci\u00f3 de les proves:</li> </ol> <p>Utilitza Maven per executar les proves amb la seg\u00fcent ordre:</p> <pre><code>mvn clean test -Dselenium_url=\"http://localhost:4444/wd/hub\" \n-Dapp_url=\"https://qualitat.solucions.gencat.cat\"\n</code></pre> <p>El par\u00e0metre <code>-Dapp_url=\"...\"</code> ha d'indicar la URL de l'aplicaci\u00f3, en aquest cas: <code>https://qualitat.solucions.gencat.cat</code>.</p> <ol> <li>Informe de Resultats:</li> </ol> <p>Despr\u00e9s de l'execuci\u00f3, trobareu l'informe de resultats a <code>extentreport/extent-report.html</code>.</p>"},{"location":"usage/functional/#integracio-amb-jira-i-execucio-des-de-mat","title":"Integraci\u00f3 amb Jira i Execuci\u00f3 des de MAT","text":"<p>Els prove\u00efdors poden executar les proves directament des del pla de proves de Jira, ja que est\u00e0 connectat amb el Job de Jenkins:</p> <ul> <li> <p>Job de Jenkins: <code>MAT-PROVES-FUNCIONAL-SELENIUM</code></p> </li> <li> <p>Par\u00e0metres necessaris:</p> </li> </ul> Par\u00e0metre Descripci\u00f3 repositori de codi font URL on estan allotjades les proves funcionals entorn Entorns per a fer les proves branca Branca del repositori de proves urlapp URL de l'aplicaci\u00f3 llindar de QG L\u00edmit de fallades acceptat JIRA_PROJECT_KEY Project Key de Jira JIRA_ISSUE_KEY Test Plan Key de Jira <ul> <li>Accedir al pla de proves en Jira: A la interf\u00edcie de Jira apareixeran imatges i par\u00e0metres (per exemple, \"Jira Plan de proves\"). (Es poden incloure captures d'imatge referenciant les diferents vistes: pla de proves, par\u00e0metres, test runs, dashboards, etc.)</li> </ul>"},{"location":"usage/functional/#visualitzacio-dels-resultats","title":"Visualitzaci\u00f3 dels Resultats","text":""},{"location":"usage/functional/#informe-html-de-proves-funcionales","title":"Informe HTML de Proves Funcionales","text":"<p>Aquest document HTML prov\u00e9 de la llibreria Extent Report, i cont\u00e9 les execucions detallades.</p> <p> </p> Diagrama del proc\u00e9s de Continuous Deployment <p> </p> Diagrama del proc\u00e9s de Continuous Deployment"},{"location":"usage/functional/#integracio-amb-jira","title":"Integraci\u00f3 amb Jira","text":"<p>Els resultats es poden visualitzar dins del test plan de Jira, amb adjunts als tests i l\u2019estat dels test runs.</p> <p> </p> Diagrama del proc\u00e9s de Continuous Deployment <p> </p> Diagrama del proc\u00e9s de Continuous Deployment"},{"location":"usage/functional/#taulers-de-monitoratge","title":"Taulers de Monitoratge","text":"<p>Tamb\u00e9 es pot consultar l'estat general del projecte en taulers com els de Jira Dashboard i Grafana.</p> <p> </p> Diagrama del proc\u00e9s de Continuous Deployment <p>Nota: Comproveu sempre la compatibilitat de versions entre els navegadors i els controladors web. Actualitzeu els par\u00e0metres segons les necessitats del vostre entorn de proves.</p>"}]}